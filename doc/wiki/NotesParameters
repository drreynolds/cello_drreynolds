= Cello Parameters =

[[TOC]]

This page is for developing the syntax and scope of parameters for Cello.

== All Parameters ==

 * [NotesParametersEnzo All Enzo Parameters] ''As of May 2009 svn r2318; includes undocumented parameters''
 * [NotesParametersCello All Cello Parameters]  ''list of Cello parameters''
----


== Syntax and Grammar ==

Whereas Enzo uses a flat parameter list with relatively simple data types,  Cello will use a more "hierarchical" parameter list and allow more complicated data types.  The rationale is that the power of the application is limited by the expressiveness of its input; conversely, a rich and powerful input language can allow the application itself to be more powerful.  Flat lists of parameters with simple types are either limited if there are few parameters, or difficult to read and write if there are many.

=== Preprocessing ===

==== `#include` ====

The `#include` preprocessor directive is used to include other parameter declarations from other files.  For example, one can have a file of parameters for AMR that is maintained separately from problem specific declarations:

{{{
#include "amr.cello"
#include "problem.cello"
}}}

The advantage of using `#include` is that repetition between different parameter files can be reduced.  The disadvantage is that the parameters can be spread out among different files.  Cello will output a single composite input file, as Enzo does for restarts.

==== #define ====

The `#define` preprocessing directive is used for macro definitions of frequently constructs, or
to define constants that are used in multiple places in one place so that they can be modified easily. 
For example, the following initializes the density field to be 1.0 for points within two spheres, and 0
elsewhere:

{{{
#define SPHERE(X,Y,Z,R) (X*X + Y*Y + Z*Z < R*R)

Initial { density = [1.0, SPHERE(1,1,1,1) || SPHERE(1,3,1,1), 0] }
}}}

==== Comments ====

Comments begin with `#` and extend to the end of the line.  Exceptions are the `#include` and `#define` preprocessor directives.


=== Data types ===

Parameters can be assigned different types, depending on the parameter name and the group the parameter belongs to.

 || '''Basic Types''' || '''Examples''' ||
 || || ||
 ||scalar    || `6.673e-8` ||
 ||string   || `"velocity_x"` ||
 ||variable   || `x`, `y`, `z`, or `t` ||
 || || ||
 || '''Expression Types''' || '''Examples''' ||
 || || ||
 ||scalar expression ||  `2.0*sin(x) + cos(y)` ||
 ||logical expression    || `(x < y) || (y < z)` ||
 || || ||
 || '''Composite Types''' || '''Examples''' ||
 || || ||
 ||list       || `[ "velocity_x", 3.14, x < y ]` ||

|| `<value> ::= <value-scalar> | <value-string> | <value-variable> | <scalar-expression> | <logical-expression> | <list>  ||

Basic '''Scalar''' types are any floating point or integral numerical values.

Basic '''String''' types are enclosed in double-quotes.

Basic '''Variables''' represent the position in space (`x`, `y`, and `z`) and time (`t`). ''[Units are to be determined.  Capital variables `X`,`Y`,`Z`,`T` may have similar meaning but with different units, e.g. lower-case may be problem domain but upper-case  solution domain.]''

'''Scalar expressions''' are any "C-like" expression evaluating to a `Scalar`, and involving `Scalar`'s, `Variables`'s, operations `+` `-` `*` `/`, and standard functions in `math.h`.  Scalar expressions are used for specifying time-varying boundary conditions, etc.

'''Logical expressions''' are any "C-like" expressions that evaluate to "true" or "false", and involve `Scalar`'s, `Variables`'s, and at least one relational operator `==` `!=` `>` `<` `<=` `>=`.  Logical expressions are used for defining subregions of the domain for initializing `Field`'s.

'''Lists''' represent an ordered sequence of values of types except other lists, separated by commas.

=== Constructs ===

==== Groups ====

A group is a collection of related parameters: 

|| `<group> ::=  "{" <parameter-assignment-list> "}"` ||

Each group has a unique name, and is either specified by the "name" parameter in the group's parameter list,
or by the group name if the "name" parameter is unspecified and the group-name is unique. 

Top-level groups are associated with Cello components, which are capitalized:  

|| `<named-group> ::= <component-name> <group>` ||

Lower-level groups are treated as a composite variable type, and are assigned to variables.

==== Parameter ====

A parameter is a variable associated with a group.  A parameter assignment is the assignment of a value to a parameter.  All parameters are associated with a group.  The scope of a parameter is its enclosing group. Parameters may have default values, may be optional or required, and may have various types, such as list, scalar, logical expression, etc., described below.

|| `<parameter-assignment> ::= <parameter-name> '=' <value>` ||


==== Parameter assignment list ====

A parameter assignment list is a (possibly empty) list of assignments to parameters.  White space is ignored.  

|| `<parameter-assignment-list> ::= <parameter-assignment> | <parameter-assignment-list> <separator> <parameter-assignment>` ||

The `<separator>` is one or more semi-colons or newline.

