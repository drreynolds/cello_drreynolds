([NotesComponentArrayLayout Array:Layout] < [NotesComponentArray Array] > [NotesComponentArrayItBlock Array:ItBlock])

= `Block` Subcomponent =

[[TOC]]

== `Block` class ==

=== Index calculation ===

Possible ways of calculating indices, assuming loops are `ix=0 to nx-1`, `iy=0 to ny-1`, and `iz=0 to nz-1`:

|| Absolute ||  `for iz { for iy { for ix {i = ix*dx + iy*dy + iz*dz}}}` ||1 mul + 2 madd's||
|| Relative ||  `for iz { for iy { for ix {i += dx} i += dy - nx*dx} i += dz - ny*dy }` ||1 add in inner-loop||

=== Attributes ===
=== Functions ===

 || `Block::Block()`|| ''`Block` constructor'' ||
 || `Block::~Block()`|| ''`Block` destructor'' || 
 || `Block::array()` || ''Return pointer to the start of an array in `Array` ||
 || `Block::get_dim()` || ''Return allocated block dimensions'' ||
 || `Block::get_size()` || ''Return size of the block'' ||
 || `Block::get_inc()` || ''Return increments for loop index calculations'' ||

=== Usage ===

{{{
   Array a(layout);
   Array b(layout);

   double * av;
   double * bv;

   ItBlock * itBlock (layout);

    while (Block * itBblock = itBlock++) {

     av = a.block(itBlock);
     bv = b.block(itBlock);

     int nx,ny,nz;
     int dx,dy,dz

     block->get_size(&nx,&ny,&nz);
     block->get_inc (&dx,&dy,&dz);
 
     int i,ix,iy,iz;

     // Absolute index calculation

     for (iz=0; iz<nz; iz++) {
       for (iy=0; iy<ny; iy++) {
         for (ix=0; ix<nx; ix++) {
           i = ix*dx + iy*dy + iz*dz;
           bv[i] = av[i];
         }
       }
     }
     i = 0;

     // Relative index updates

     for (iz=0; iz<nz; iz++) {
       for (iy=0; iy<ny; iy++) {
         for (ix=0; ix<nx; ix++) {
           av[i] = bv[i];
           i += dx;
         }
         i += (-nx*dx + dy);
       }
       i += (-ny*dy + dz);
     }
   }
}}}
