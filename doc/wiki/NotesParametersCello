
([NotesParameters Parameters])

[[TOC]]

= Cello Parameters =


 || || || || || ||
 || ||  '''Mesh''' || '''root'''      || `list` || ''size of the root grid, e.g. ![400,400]'' ||
 || ||  '''Mesh''' || '''max_level''' || `int` || ''maximum level (with root = 0), assuming refinement by two ||
 || ||  '''Mesh''' || '''refine'''    || `int` || ''refinement factor = 2, 4, etc.'' ||
 || ||  '''Mesh''' || '''balanced''' ||  `logical` ||  ''whether the tree is balanced or "full" (ala Flash) or not'' ||
 || ||  '''Mesh''' || '''backfill'''  || `logical` || ''whether to backfill for refine > 2'' ||
 || ||  '''Mesh''' || '''coalesce''' ||  `logical` ||  ''whether to coalesce small patches into one big one'' ||
 || || '''Mesh''' || '''min_patch_size''' ||  `integer` ||  ''minimum allowed patch size'' ||
 || || '''Mesh''' || '''max_patch_size''' ||  `integer` ||  ''maximum allowed patch size'' ||
 || || || || ||
 || || '''Boundary''' || '''type''' ||  `string` ||  ''type of boundary condition, one of "reflecting",  "inflow", "outflow", "periodic", "dirichlet", "neumann"'' ||
 || || || || ||
 || || '''Domain''' || '''extent'''||  `list` ||  ''extent of the domain, `[xmin, xmax]`, `[xmin, xmax, ymin, ymax]`, or `[xmin, xmax, ymin, ymax, zmin, zmax]`'' ||
 || || || || ||
 || || '''Field''' || '''courant''' ||  `scalar` ||  ''courant condition for fields'' ||
 || || '''Field''' || '''interleave''' ||  `list` ||   ''list of fields to group together'' ||
 || || '''Field:FIELD''' || '''min_value''' ||  `scalar` ||  ''minimum value for the given field'' ||
 || || '''Field:FIELD''' || '''max_value''' ||  `scalar` ||  ''maxmum value for the given field'' ||
 || || || || ||
 || || '''Initial''' || '''FIELD''' ||  `list` ||  ''list of scalar-expression / logical-expression pairs'' ||
 || || || || ||
 || || '''Output''' || '''file''' ||  `list` ||  ''name for the output files, where the first element is a format string (ala `printf()`), and remaining elements are scalar expressions.  E.g.  `["wave_pool-t=%3.1f.data", t]`'' ||
 || || '''Output''' || '''time''' ||  `list` ||  ''list of times to generate an output dump'' ||
 || || '''Output''' || '''period''' ||  `scalar` ||  ''output every t = k `period` for integer k'' ||
 || || '''Output''' || '''interval''' ||  `list` ||  ''triplet [i1,i2,i3]: output every t = i1 + k*i2 for `k = 0 .. i3-1`'' ||
 || || || || ||
 || || '''Parallel''' || '''balance_frequency''' || `list` || ''list of load balancing timesteps for each level, e.g.  `[1,8,64]`'' ||
 || || '''Parallel''' || '''balance_method''' ||	 `string` || ''method to use for load balancing. Default is "none".'' ||
 || || || || ||
 || || '''Physics''' || '''gamma''' ||  `scalar`  ||  ''ratio of specific heats for an ideal gas'' ||
 || || || || ||
 || || '''Stopping''' || '''time''' ||  `scalar`  ||  ''stopping time'' ||
 || || '''Stopping''' || '''cycle''' ||  `integer`  ||  ''stopping cycle (root grid)''  ||
 || || || || ||
 || || '''Enzo:ppm''' || '''diffusion'''  ||  `scalar`  ||  ''PPM diffusion parameter'' ||
 || || '''Enzo:ppm''' || '''flattening''' ||  `scalar` ||  ''PPM flattening parameter'' ||
 || || '''Enzo:ppm''' || '''steepening''' ||  `scalar` ||  ''PPM steepening parameter'' ||
