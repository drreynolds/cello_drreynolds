([NotesComponentArrayItBlock Array:ItBlock] < [NotesComponentArray Array] > [NotesComponentArrayBlock Array:Block])

= `Layout` Subcomponent =

[[TOC]]

`Layout` defines how to distribute an array across a hierarchical parallel computer.  Initially two levels are supported, for distributed memory (process) and shared memory (thread) components.  Implementations of data transfer and synchronization, whether MPI, OpenMP, UPC, etc., are implemented by the `Parallel` component, and are hidden from the `Layout` abstraction.  Some properties of `Layouts` are listed below:

 * Each `Layout` has a range of processes and threads defining a square in (process,thread) space
 * An `Array` with a given `Layout` has its elements distributed within this square
 * Any two layouts are either disjoint, or one is fully contained within the other
 * A `Layout`'s mapping of array elements to (process,thread) pairs may be defined "from below" in terms of the `Block` size
 * A `Layout`'s mapping of array elements to (process,thread) pairs may be defined "from above" in terms of the `Array` size
 * Different `Layout`s may use different internal communication or synchronization methods
 * Data storage per `Layout` is o(P).
 * `Layout`s are independent of details of `Block` internals, including how multiple arrays are stored and different variable centering

=== Functions ===

 || || `Layout::iterator()`|| ''Return an `ItBlock` iterator over all (local) `Block`s of the `Layout`''||
 || || `Layout::process_range()` || ''Return the range p_min to p_max+1 of processors'' ||
 || || `Layout::thread_range()` || ''Return the range t_min to t_max+1 of threads'' ||
 || || `Layout::block_size()`  || ''Return the size of blocks'' ||
 || || `Layout::set_process_parallel()` || ''Set how processes communicate, (MPI1, MPI2, UPC)'' ||
 || || `Layout::set_thread_parallel()` || ''Set how threads are  communicate, (MPI1, MPI2, UPC)'' ||


=== Attributes ===

 || || `int Layout::dim_;`||  ''dimensionality of the `Array` ''|| 
 || || `int Layout::ma_[];` || ''array size''|| 
 || || `int Layout::np_[];` || ''number of virtual distributed memory processes''|| 
 || || `int Layout::nt_[];` || ''number of virtual shared memory threads''|| 
 || || `int Layout::p0_;` || ''first physical process''|| 
 || || `int Layout::p1_;` || ''last physical process''|| 
 || || `int Layout::t0_;` || ''first physical thread''|| 
 || || `int Layout::t1_;` || ''last physical thread''|| 

=== Usage ===

==== Serial ====
{{{
  int dimension[3] = {20,20,20};
  int size[3]      = {10,10,10};
  int count        = 6;

  // Allocate 6 arrays, each 10 x 10 x 10
  Layout (dimension,size,count);

  Array array(layout);
 
}}}
==== MPI parallel ====

==== MPI parallel / OMP threaded ====


