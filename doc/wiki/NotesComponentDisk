([NotesComponentData Data] < [NotesComponents index] > [NotesComponentDistribute Distribute])

[[TOC]]

= `Disk` Component =

The `Disk` component provides low-level functions for writing and reading data to and from disk storage in various formats.

General guidelines for efficient use of parallel filesystems include the following:

 * Disk access sizes should be multiples of the system page size
 * Disk accesses should be sequential
 * Concurrent meta-data traffic (create, unlink, flock, etc) to common filesystem objects should be minimized


== `Disk` classes ==


 || ||  `File` || ''a disk file'' ||
 || * ||  `Hdf5` || ''HDF5 files'' ||
 ||  ||  `Ifrit` || ''IIFrIT (Ionization FRont Interactive Tool)  files'' ||

=== `Hdf5` class ===

The `Hdf5` class provides an interface layer of functions between Cello and the HDF5 parallel file library.
It includes functions to aid the writing and reading of arrays and particles defined on an AMR hierarchy,
but does not depend on any other Cello component, including the `Array`, `Particles`, or `Amr` components.



   ==== `Hdf5` attributes ====


 || `hid_t` || `file_ `|| ''HDF5 file descriptor'' ||
 || `std::string` || `file_name_` || ''HDF5 file name'' ||
 || `std::string` || `file_mode_`|| ''HDF5 file mode'' ||
 || `bool`  || `is_file_open_` || ''Whether file is open or closed'' ||
 || `hid_t` || `dataset_` || ''HDF5 dataset descriptor'' ||
 || `std::string` || `dataset_name_` || ''HDF5 dataset name'' ||
 || `hid_t` || `dataspace_` || ''HDF5 dataspace descriptor'' ||
 || `hid_t` || `datatype_` || ''HDF5 data type'' ||
 || `herr_t`  ||     `status_` || ''Last error'' ||

   ==== `Hdf5` functions ====

 || * ||  `Hdf5::file_open()` ||  ''Open the file with the given mode'' ||
 || * || `Hdf5::file_close )` || ''Close the file'' ||
 || * ||   `Hdf5::group_open()` || ''Open the given group'' ||
 || * ||   `Hdf5::group_close()` || ''Close the current group'' ||
 || * ||  `Hdf5::dataset_open_read()` || ''Open the given dataset with given size for reading'' ||
 || * ||  `Hdf5::dataset_open_write()` || ''Open the given dataset with the given size for writing'' ||
 || * || `Hdf5::dataset_close()` || ''Close the current dataset'' ||
 || * || `Hdf5::read()` || ''Read the current dataset into the buffer'' ||
 || * || `Hdf5::write()` || ''Write the current dataset from the buffer'' ||



   ==== `Hdf5` parameters ====
