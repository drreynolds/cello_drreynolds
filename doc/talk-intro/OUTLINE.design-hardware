
Hardware Components: Memory, Disk, Parallel

   Low-level components provide controlled access to hardware

   Memory
      wrap new[]/delete[]
          optionally monitor usage by different components of the code 
             AMR overhead, fields, particles, etc.
             warn when running low
             provide memory information to load balancing code
          optionally fill arrays automatically with special values for debugging
             after allocating and before deallocating
          optionally use native new[]/delete[] for speed
          all controlled by input file parameters
         
   Disk

      wrap H5_*
      allows other formats without rest of program knowing
      multiple data formats for different filesystem hardware or user needs
         writing for restarts may be different than writing for user-analysis
      disk hardware parameters controlled by input file parameters

   Parallel

      Flexible use of MPI-1, MPI-2, OMP, UPC?, GPU??
      Parallelize different parts of program in different ways (e.g. UPC particles)
      Higher-level software components independent of what parallelization strategy used
         Parallelization orchestrated by Control component
            Control calls Parallel and Method routines
            Method kernel code is serial (but thread-safe)
               method applied to a single rectangular patch
               interpolate values between levels
               operations on patch boundaries
             
   
   
      

