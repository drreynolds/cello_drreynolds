
# Define a test for running unit tests

unit       = Builder(action = "$SOURCE > $TARGET")
unit_parse = Builder(action = "bin/test_parse < $SOURCE > $TARGET")

env = Environment(BUILDERS = {'Unit': unit, 'UnitParse' : unit_parse})

env.Unit('test_array.out',       '#/bin/test_array')
env.Unit('test_block.out',       '#/bin/test_block')
env.Unit('test_data.out',        '#/bin/test_data')
env.Unit('test_disk_hdf5.out',   '#/bin/test_disk_hdf5')
env.Unit('test_error.out',       '#/bin/test_error')
env.Unit('test_memory.out',      '#/bin/test_memory')
env.Unit('test_monitor.out',     '#/bin/test_monitor')
env.Unit('test_parameters.out',  '#/bin/test_parameters')
env.Unit('test_schedule.out',    '#/bin/test_schedule')
env.Unit('test_performance.out', '#/bin/test_performance')

env.UnitParse('parse_groups.out',     'parse_groups.in')
env.UnitParse('parse_integer.out',    'parse_integer.in')
env.UnitParse('parse_list.out',       'parse_list.in')
env.UnitParse('parse_logical.out',    'parse_logical.in')
env.UnitParse('parse_scalar.out',     'parse_scalar.in')

env.UnitParse('parse_implosion.out',  'parse_implosion.in')
env.UnitParse('parse_shock-pool.out', 'parse_shock-pool.in')


# env.Unit('Array.unit','test_enzo_method_ppm')
# env.Unit('Array.unit','test_tree')
# env.Unit('Array.unit','test_tree_k')
#	./test_parse < shock-pool.in > shock-pool.out
#	./test_parse < test_groups.in > test_groups.out
#	./test_parse < test.in > test.out
#	./test_parse < test_list.in > test_list.out
#	./test_parse < test_logical.in > test_logical.out
#	./test_parse < test_scalar.in > test_scalar.out
#	-grep -i -l error *.out
#
#
#
#