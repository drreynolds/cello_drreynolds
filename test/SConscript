Import('env')
Import('platform')
Import('parallel_run')
Import('parallel_type')
Import('serial_run')


# O test_FieldFaces.cpp
# O test_MethodEnzoPpml.cpp
# O test_Mpi.cpp
# O test_ParallelAffinity.cpp
# O test_ParallelGroup.cpp
# O test_ParallelLayout.cpp
# O test_tree.cpp

# X test_Data.cpp
# X test_Error.cpp
# X test_FieldBlock.cpp
# X test_FieldDescr.cpp
# X test_FileHdf5.cpp
# X test_Ifrit.cpp
# X test_Memory.cpp
# X test_Mesh.cpp
# X test_MethodEnzoPpm.cpp
# X test_Monitor.cpp
# X test_Parallel.cpp
# X test_Parameters.cpp
# X test_Parse.cpp
# X test_Performance.cpp
# X test_ppm.cpp
# X test_ppml.cpp
# X test_Schedule.cpp
# X test_Simulation.cpp
# X test_TreeK.cpp

# Define a test for running unit tests

run_parse    = Builder(action = serial_run   +  "$SOURCE < $ARGS > $TARGET")
run_serial   = Builder(action = serial_run   +  "$SOURCE $ARGS > $TARGET")
run_parallel = Builder(action = parallel_run + " $SOURCE $ARGS > $TARGET")
run_method   = Builder(action = serial_run   + " $SOURCE > $ARGS")
run_tree     = Builder(action = serial_run   + " $SOURCE $ARGS > $OUT")
make_movie   = Builder(action = "convert ${ARGS} $TARGET; chmod a+r $TARGET; rm ${ARGS}")

env.Append(BUILDERS = { 'RunSerial'   : run_serial } ) 
env.Append(BUILDERS = { 'RunParallel' : run_parallel } )
env.Append(BUILDERS = { 'RunParse'    : run_parse } )
env.Append(BUILDERS = { 'MakeMovie'   : make_movie } )
env.Append(BUILDERS = { 'RunMethod'   : run_method } )
env.Append(BUILDERS = { 'RunTree'     : run_tree } )


env.RunSerial(parallel_type + '-test_Data.unit',        '#/bin/test_Data')

env.RunSerial(parallel_type + '-test_Error.unit',       '#/bin/test_Error')

env.RunSerial(parallel_type + '-test_FieldBlock.unit','#/bin/test_FieldBlock')
env.RunSerial(parallel_type + '-test_FieldFaces.unit','#/bin/test_FieldFaces')
env.RunSerial(parallel_type + '-test_FieldDescr.unit','#/bin/test_FieldDescr')

env.RunSerial(parallel_type + '-test_FileHdf5.unit',    '#/bin/test_FileHdf5')
env.RunSerial(parallel_type + '-test_Ifrit.unit',       '#/bin/test_Ifrit')
# env.RunSerial(parallel_type + '-test_Layout.unit',      '#/bin/test_Layout')
env.RunSerial(parallel_type + '-test_Memory.unit',      '#/bin/test_Memory')
env.RunSerial(parallel_type + '-test_Mesh.unit',        '#/bin/test_Mesh')
env.RunSerial(parallel_type + '-test_Parameters.unit',  '#/bin/test_Parameters')
env.RunSerial(parallel_type + '-test_Performance.unit', '#/bin/test_Performance')
env.RunSerial(parallel_type + '-test_Schedule.unit',    '#/bin/test_Schedule')
env.RunSerial(parallel_type + '-test_Simulation.unit',  '#/bin/test_Simulation')

t = env.RunSerial(parallel_type + '-test_TreeK-D2-R2-L6.unit', 
	'#/bin/test_TreeK', ARGS='2 2 6 input/Enzo-P-2048.png')
Clean(t,Glob('../TreeK-D=2-R=2-L=6*png'))
Clean(env.RunSerial(parallel_type + '-test_TreeK-D2-R2-L7.unit', 
	'#/bin/test_TreeK', ARGS='2 2 7 input/Enzo-P-2048.png'),
	Glob('../TreeK-D=2-R=2-L=7*png'))
Clean(env.RunSerial(parallel_type + '-test_TreeK-D2-R2-L8.unit',
	 '#/bin/test_TreeK', ARGS='2 2 8 input/Enzo-P-2048.png'),
	Glob('../TreeK-D=2-R=2-L=8*png'))
Clean(env.RunSerial(parallel_type + '-test_TreeK-D2-R2-L9.unit',
	 '#/bin/test_TreeK', ARGS='2 2 9 input/Enzo-P-2048.png'),
	Glob('../TreeK-D=2-R=2-L=9*png'))
Clean(env.RunSerial(parallel_type + '-test_TreeK-D2-R2-L10.unit',
	'#/bin/test_TreeK', ARGS='2 2 10 input/Enzo-P-2048.png'),
	Glob('../TreeK-D=2-R=2-L=10*png'))
Clean(env.RunSerial(parallel_type + '-test_TreeK-D2-R4-L6.unit',
	 '#/bin/test_TreeK', ARGS='2 4 6 input/Enzo-P-2048.png'),
	Glob('../TreeK-D=2-R=4-L=6*png'))
Clean(env.RunSerial(parallel_type + '-test_TreeK-D2-R4-L8.unit',
	 '#/bin/test_TreeK', ARGS='2 4 8 input/Enzo-P-2048.png'),
	Glob('../TreeK-D=2-R=4-L=8*png'))
Clean(env.RunSerial(parallel_type + '-test_TreeK-D2-R4-L10.unit',
	'#/bin/test_TreeK', ARGS='2 4 10 input/Enzo-P-2048.png'),
	Glob('../TreeK-D=2-R=4-L=10*png'))

Clean(env.RunSerial
(parallel_type + '-test_TreeK-D3-R2-L4.unit', '#/bin/test_TreeK', ARGS='3 2 4'),
Glob('../TreeK-D=3-R=2-L=4*png'))
Clean(env.RunSerial
(parallel_type + '-test_TreeK-D3-R2-L5.unit', '#/bin/test_TreeK', ARGS='3 2 5'),
Glob('../TreeK-D=3-R=2-L=5*png'))
Clean(env.RunSerial
(parallel_type + '-test_TreeK-D3-R2-L6.unit', '#/bin/test_TreeK', ARGS='3 2 6'),
Glob('../TreeK-D=3-R=2-L=6*png'))
Clean(env.RunSerial
(parallel_type + '-test_TreeK-D3-R2-L7.unit', '#/bin/test_TreeK', ARGS='3 2 7'),
Glob('../TreeK-D=3-R=2-L=7*png'))
Clean(env.RunSerial
(parallel_type + '-test_TreeK-D3-R2-L8.unit', '#/bin/test_TreeK', ARGS='3 2 8'),
Glob('../TreeK-D=3-R=2-L=8*png'))

Clean(env.RunSerial
(parallel_type + '-test_TreeK-D3-R4-L4.unit', '#/bin/test_TreeK', ARGS='3 4 4'),
Glob('../TreeK-D=3-R=4-L=4*png'))
Clean(env.RunSerial
(parallel_type + '-test_TreeK-D3-R4-L6.unit', '#/bin/test_TreeK', ARGS='3 4 6'),
Glob('../TreeK-D=3-R=4-L=6*png'))

Clean(env.RunSerial	
(parallel_type + '-test_TreeK-D3-R4-L8.unit', '#/bin/test_TreeK', ARGS='3 4 8'),
Glob('../TreeK-D=3-R=4-L=8*png'))
	

Clean(env.RunSerial(parallel_type + '-test_ppml_implosion.unit', '#/bin/test_ppml', 
               ARGS='ppml-implosion3  24 10 10'),
	Glob('../*-ppml-implosion3-*png'))
Clean(env.RunSerial(parallel_type + '-test_ppml_blast.unit',     '#/bin/test_ppml', 
               ARGS='ppml-blast       24 10 10'),
	Glob('../*-ppml-blast-*png'))

Clean(env.RunSerial(parallel_type + '-test_ppm_image.unit',      '#/bin/test_ppm',  
               ARGS='ppm-image       100 20 10'),
	Glob('../*-ppm-image-*png'))
Clean(env.RunSerial(parallel_type + '-test_ppm_implosion.unit',  '#/bin/test_ppm',  
               ARGS='ppm-implosion   64 10 10'),
	Glob('../*-ppm-implosion-*png'))
Clean(env.RunSerial(parallel_type + '-test_ppm_implosion3.unit', '#/bin/test_ppm',  
               ARGS='ppm-implosion3   24 10 10'),
	Glob('../*-ppm-implosion3-*png'))

Clean(env.RunSerial(parallel_type + '-test_Monitor.unit',  '#/bin/test_Monitor'),
	Glob('../monitor_image_*png'))

env.RunParse(parallel_type + '-test_parse_groups.unit',     '#/bin/test_Parse', ARGS='input/parse_groups.in')
env.RunParse(parallel_type + '-test_parse_integer.unit',    '#/bin/test_Parse', ARGS='input/parse_integer.in')
env.RunParse(parallel_type + '-test_parse_list.unit',       '#/bin/test_Parse', ARGS='input/parse_list.in')
env.RunParse(parallel_type + '-test_parse_logical.unit',    '#/bin/test_Parse', ARGS='input/parse_logical.in')
env.RunParse(parallel_type + '-test_parse_scalar.unit',     '#/bin/test_Parse', ARGS='input/parse_scalar.in')

env.RunParse(parallel_type + '-test_parse_implosion.unit',  '#/bin/test_Parse', ARGS='input/implosion.in')
env.RunParse(parallel_type + '-test_parse_shock-pool.unit', '#/bin/test_Parse', ARGS='input/shock-pool.in')


Clean(env.RunMethod('../ppm-density-00000.png', '#/bin/test_MethodEnzoPpm', ARGS='test/'+parallel_type+'-test_MethodEnzoPpm.unit'),[Glob('../ppm-*-00???.png'),parallel_type + '-test_MethodEnzoPpm.unit'])

# env.MakeMovie('ppm-density.mpg',      '#/ppm-density-00000.png', ARGS='ppm-density-?????.png')

# env.RunParallel(parallel_type + '-test_affinity.unit',   '#/bin/test_Affinity')
env.RunParallel('cello_implosion.unit', '#/bin/cello', ARGS='input/implosion.in')
if (parallel_type == "mpi"):
	env.RunParallel(parallel_type + '-test_GroupProcessMpi.unit',        '#/bin/test_GroupProcessMpi')
	# env.RunParallel(parallel_type + '-test_mpi.unit',        '#/bin/test_Mpi')
# env.RunParallel(parallel_type + '-test_jacobi.unit',        '#/bin/test_jacobi')

# Prevent concurrent running of parallel jobs

SideEffect('log.txt', 
     [ parallel_type + '-test_GroupProcessMpi.unit', 
       parallel_type + '-cello_implosion.unit'])



