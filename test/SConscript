Import('env')
Import('parallel_run')
Import('parallel_run_args')
Import('serial_run')
Import('ip_charm')

Import('bin_path')
Import('test_path')

env['COPY'] = ''

# Define a test for running unit tests

date_cmd = 'echo "-------------------"; date +"%Y-%m-%d %H:%M:%S";'
hdf5_to_png  = Builder(action = 'test/cello-h5topng.sh $ARGS');
copy_bin     = Builder(action = "cp $SOURCE $ARGS");
run_serial   = Builder(action = date_cmd + serial_run   +  "$SOURCE $ARGS> $TARGET 2>&1; $COPY")
run_parallel = Builder(action = date_cmd + parallel_run + " $SOURCE $ARGS " + parallel_run_args + " > $TARGET 2>&1; $COPY")
make_movie   = Builder(action = "png2swf -r 5 -o $TARGET ${ARGS} ")

env.Append(BUILDERS = { 'RunSerial'   : run_serial } ) 
env.Append(BUILDERS = { 'RunParallel' : run_parallel } )
env.Append(BUILDERS = { 'MakeMovie'   : make_movie } )
env.Append(BUILDERS = { 'Hdf5ToPng'   : hdf5_to_png } )

env_mv_out  = env.Clone(COPY = 'mv `ls *.png *.h5` ' + test_path)
env_mv_test = env.Clone(COPY = 'mv test*out test*in ' + test_path)
env_rm_png  = env.Clone(COPY = 'rm `ls *.png`')

# h5topng

#----------------------------------------------------------------------
# DISK COMPONENT          
#----------------------------------------------------------------------
Clean(env.RunSerial
      ('test_FileHdf5.unit',  bin_path + '/test_FileHdf5'),
      '#test_disk.h5')
       
Clean(env.RunSerial
      ('test_FileIfrit.unit', bin_path + '/test_FileIfrit'),
      '#/FileIfrit_test.bin')
#----------------------------------------------------------------------
# ENZO COMPONENT          
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ERROR COMPONENT         
#----------------------------------------------------------------------
env.RunSerial('test_Error.unit',       bin_path + '/test_Error')
#----------------------------------------------------------------------
# FIELD COMPONENT         
#----------------------------------------------------------------------
env.RunSerial('test_FieldBlock.unit',bin_path + '/test_FieldBlock')
env.RunSerial('test_FieldDescr.unit',bin_path + '/test_FieldDescr')
env.RunSerial('test_FieldFace.unit', bin_path + '/test_FieldFace')
env.RunSerial('test_ItField.unit',   bin_path + '/test_ItField')
#----------------------------------------------------------------------
# IO COMPONENT        
#----------------------------------------------------------------------
env.RunSerial('test_Schedule.unit',     bin_path + '/test_Schedule')
env.RunSerial('test_ItReduce.unit',      bin_path + '/test_ItReduce')
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# MEMORY COMPONENT        
#----------------------------------------------------------------------
env.RunSerial('test_Memory.unit',      bin_path + '/test_Memory')
#----------------------------------------------------------------------
# METHOD COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# MESH COMPONENT          
#----------------------------------------------------------------------
env.RunSerial('test_Hierarchy.unit', bin_path + '/test_Hierarchy')
env.RunSerial('test_Block.unit',     bin_path + '/test_Block')
env.RunSerial('test_Index.unit',     bin_path + '/test_Index')
Clean(env_mv_out.RunSerial('test_Tree.unit', bin_path + '/test_Tree'),
      ['#/test_tree_1-initial.png',
       '#/test_tree_2-balanced.png',
       '#/test_tree_3-merged.png' ])
Clean(env_mv_out.RunSerial('test_TreeDensity.unit',
	      bin_path + '/test_TreeDensity',
              ARGS='input/density_128.h5 Density 0 10'),
      ['#/density_3d_1-initial.png',
       '#/density_x_1-initial.png',
       '#/density_3d_2-balanced.png',
       '#/density_x_2-balanced.png',
       '#/density_3d_3-coalesced.png',
       '#/density_x_3-coalesced.png'])

env.RunSerial('test_ItFace.unit',    bin_path + '/test_ItFace')
env.RunSerial('test_ItChild.unit',   bin_path + '/test_ItChild')

env.RunSerial('test_Node.unit',      bin_path + '/test_Node')
env.RunSerial('test_NodeTrace.unit', bin_path + '/test_NodeTrace')
env.RunSerial('test_ItNode.unit',    bin_path + '/test_ItNode')
#----------------------------------------------------------------------
# MONITOR COMPONENT       
#----------------------------------------------------------------------
env.RunSerial('test_Monitor.unit',      bin_path + '/test_Monitor')
#----------------------------------------------------------------------
# PARALLEL COMPONENT      
#----------------------------------------------------------------------
env.RunSerial('test_Layout.unit',      bin_path + '/test_Layout')
#----------------------------------------------------------------------
# PARAMETERS COMPONENT    
#----------------------------------------------------------------------
Clean(env_mv_test.RunSerial
      ('test_Parameters.unit',  bin_path + '/test_Parameters'),
      ['#/test.in','#/test1.out','#/test2.out'])
#----------------------------------------------------------------------
# PARTICLE COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# PERFORMANCE COMPONENT   
#----------------------------------------------------------------------
env.RunSerial('test_Performance.unit', bin_path + '/test_Performance')
env.RunSerial('test_Papi.unit',        bin_path + '/test_Papi')
env.RunSerial('test_Timer.unit',       bin_path + '/test_Timer')

#----------------------------------------------------------------------
# PORTAL COMPONENT        
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# PROBLEM COMPONENT        
#----------------------------------------------------------------------

env.RunSerial('test_Mask.unit', bin_path + '/test_Mask')
env.RunSerial('test_Value.unit', bin_path + '/test_Value')

#----------------------------------------------------------------------
# SIMULATION COMPONENT    
#----------------------------------------------------------------------

# (test_Simulation removed since supplanted by enzo-p)

#----------------------------------------------------------------------
# TEST INPUT PARAMETER PARSER
#----------------------------------------------------------------------

env.RunSerial('parse_groups.unit',     bin_path + '/test_Parse', ARGS='input/parse_groups.in')
env.RunSerial('parse_integer.unit',    bin_path + '/test_Parse', ARGS='input/parse_integer.in')
env.RunSerial('parse_list.unit',       bin_path + '/test_Parse', ARGS='input/parse_list.in')
env.RunSerial('parse_logical.unit',    bin_path + '/test_Parse', ARGS='input/parse_logical.in')
env.RunSerial('parse_scalar.unit',     bin_path + '/test_Parse', ARGS='input/parse_scalar.in')
env.RunSerial('parse_include.unit',    bin_path + '/test_Parse', ARGS='input/parse_include.in')
env.RunSerial('parse_implosion.unit',  bin_path + '/test_Parse', ARGS='input/problem_implosion.in')

#----------------------------------------------------------------------
# TEST FULL APPLICATION
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# MethodPpm tests
#----------------------------------------------------------------------

# serial
Clean(env_mv_out.RunSerial ('test_method_ppm-1.unit',bin_path + '/enzo-p', 
		ARGS='input/method_ppm-1.in'),
      [Glob('#/' + test_path + '/method_ppm-1*.png'),
       Glob('#/' + test_path + '/method_ppm-1*.h5'),
        '#/input/method_ppm-1.in.out'])

env.MakeMovie ("method_ppm-1.swf", "test_method_ppm-1.unit", \
                ARGS= test_path + "/method_ppm-1*.png");

# parallel

Clean(env_mv_out.RunParallel ('test_method_ppm-8.unit',bin_path + '/enzo-p', 
		ARGS='input/method_ppm-8.in'),
      [Glob('#/' + test_path + '/method_ppm-8*.png'),
      Glob('#/' + test_path + '/method_ppm-8*.h5'),
      '#/input/method_ppm-8.in.out'])

env.MakeMovie ("method_ppm-8.swf", "test_method_ppm-8.unit", \
                ARGS= test_path + "/method_ppm-8-*.png");

#----------------------------------------------------------------------
# MethodHeat tests
#----------------------------------------------------------------------

# serial
Clean(env_mv_out.RunSerial ('test_method_heat-1.unit',bin_path + '/enzo-p', 
		ARGS='input/method_heat-1.in'),
      [Glob('#/' + test_path + '/method_heat-1*.png'),
       Glob('#/' + test_path + '/method_heat-1*.h5'),
        '#/input/method_heat-1.in.out'])

env.MakeMovie ("method_heat-1.swf", "test_method_heat-1.unit", \
                ARGS= test_path + "/method_heat-1*.png");

# parallel

Clean(env_mv_out.RunParallel ('test_method_heat-8.unit',bin_path + '/enzo-p', 
		ARGS='input/method_heat-8.in'),
      [Glob('#/' + test_path + '/method_heat-8*.png'),
      Glob('#/' + test_path + '/method_heat-8*.h5'),
      '#/input/method_heat-8.in.out'])

env.MakeMovie ("method_heat-8.swf", "test_method_heat-8.unit", \
                ARGS= test_path + "/method_heat-8-*.png");


#----------------------------------------------------------------------
# serial restart
#----------------------------------------------------------------------


checkpoint_ppm_1 = env_rm_png.RunSerial (
   'test_checkpoint_ppm-1.unit',
   bin_path + '/enzo-p', 
   ARGS='input/checkpoint_ppm-1.in')

restart_ppm_1 = env_mv_out.RunSerial (
   'test_restart_ppm-1.unit',
   bin_path + '/enzo-p',
   ARGS='+restart checkpoint_ppm-1-100')


env.MakeMovie ("restart_ppm-1.swf", "test_restart_ppm-1.unit", \
                  ARGS= test_path + "/checkpoint_ppm-1-*.png");

Clean(restart_ppm_1,
      [Glob('#/' + test_path + '/checkpoint_ppm-1*.png'),
       '#/input/checkpoint_ppm-1.in.out'])

env.Requires(restart_ppm_1,checkpoint_ppm_1)

#
# HANGS!
#
# parallel restart

# checkpoint_ppm_8 = env_rm_png.RunParallel (
#    'test_checkpoint_ppm-8.unit',
#    bin_path + '/enzo-p', 
#    ARGS='input/checkpoint_ppm-8.in')
# 
# restart_ppm_8 = env_mv_out.RunParallel (
#    'test_restart_ppm-8.unit',
#    bin_path + '/enzo-p',
#    ARGS='+restart checkpoint_ppm-8-100')
# 
# 
# env.MakeMovie ("restart_ppm-8.swf", "test_restart_ppm-8.unit", \
#                  ARGS= test_path + "/checkpoint_ppm-8-*.png");

# Clean(restart_ppm_8,
#       [Glob('#/' + test_path + '/checkpoint_ppm-8*.png'),
#        '#/input/checkpoint_ppm-8.in.out',])
# 
# env.Requires(restart_ppm_8,checkpoint_ppm_8)

# MethodPpml tests

Clean(env_mv_out.RunSerial ('test_method_ppml-1.unit',bin_path + '/enzo-p', 
		ARGS='input/method_ppml-1.in'),
      [Glob('#/' + test_path + '/method_ppml-1-?-????-*.png'),
       Glob('#/' + test_path + '/method_ppml-1-??-????-*.h5'),
       '#/input/method_ppml-1.in.out'])

env.MakeMovie ("method_ppml-1-x.swf", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-x-????.png");
env.MakeMovie ("method_ppml-1-y.swf", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-y-????.png");
env.MakeMovie ("method_ppml-1-z.swf", "test_method_ppml-1.unit", \
                ARGS= test_path + "/method_ppml-1-z-????.png");

Clean(env_mv_out.RunParallel ('test_method_ppml-8.unit',bin_path + '/enzo-p', 
		ARGS='input/method_ppml-8.in'),
      [Glob('#/' + test_path + '/method_ppml-8-?-????-*.png'),
       Glob('#/' + test_path + '/method_ppml-8-??-????-*.h5'),
       '#/input/method_ppml-8.in.out'])

env.MakeMovie ("method_ppml-8-x.swf", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-x-????.png");
env.MakeMovie ("method_ppml-8-y.swf", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-y-????.png");
env.MakeMovie ("method_ppml-8-z.swf", "test_method_ppml-8.unit", \
                ARGS= test_path + "/method_ppml-8-z-????.png");

#----------------------------------------------------------------------
# BOUNDARY CONDITIONS
#----------------------------------------------------------------------

# 2D boundary condition tests

Clean(env_mv_out.RunParallel ('test_boundary_reflecting-2d.unit',
                bin_path + '/enzo-p', 
                ARGS='input/boundary_reflecting-2d.in'),
      [Glob('#/' + test_path + '/boundary_reflecting-2d.png'),
       'test_boundary_reflecting-2d.unit',
       '#/input/boundary_reflecting-2d.in.out'])

Clean(env_mv_out.RunParallel ('test_boundary_reflecting_periodic-2d.unit',
                bin_path + '/enzo-p', 
                ARGS='input/boundary_reflecting_periodic-2d.in'),
      [Glob('#/' + test_path + '/boundary_reflecting_periodic-2d.png'),
       'test_boundary_reflecting_periodic-2d.unit',
       '#/input/boundary_reflecting_periodic-2d.in.out'])

Clean(env_mv_out.RunParallel ('test_boundary_periodic-2d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_periodic-2d.in'),
      [Glob('#/' + test_path + '/boundary_periodic-2d.png'),
       'test_boundary_periodic-2d.unit',
       '#/input/boundary_periodic-2d.in.out'])

# Clean(env_mv_out.RunParallel ('test_boundary_inflow-2d.unit',
# 		bin_path + '/enzo-p', 
# 		ARGS='input/boundary_inflow-2d.in'),
#       [Glob('#/' + test_path + '/boundary_inflow-2d.png'),
#        'test_boundary_inflow-2d.unit',
#        '#/input/boundary_inflow-2d.in.out'])

Clean(env_mv_out.RunParallel ('test_boundary_outflow-2d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_outflow-2d.in'),
      [Glob('#/' + test_path + '/boundary_outflow-2d.png'),
       'test_boundary_outflow-2d.unit',
       '#/input/boundary_outflow-2d.in.out'])


env.MakeMovie ("boundary_reflecting-2d.swf", "test_boundary_reflecting-2d.unit", \
                ARGS= test_path + "/boundary_reflecting-2d-????.png");
env.MakeMovie ("boundary_reflecting_periodic-2d.swf", "test_boundary_reflecting_periodic-2d.unit", \
                ARGS= test_path + "/boundary_reflecting_periodic-2d-????.png");
env.MakeMovie ("boundary_periodic-2d.swf","test_boundary_periodic-2d.unit", \
                ARGS= test_path + "/boundary_periodic-2d-????.png");
env.MakeMovie ("boundary_outflow-2d.swf","test_boundary_outflow-2d.unit", \
                ARGS= test_path + "/boundary_outflow-2d-????.png");

# 3D boundary condition tests

Clean(env_mv_out.RunParallel ('test_boundary_reflecting-3d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_reflecting-3d.in'),
      [Glob('#/' + test_path + '/boundary_reflecting-3d.png'),
       'test_boundary_reflecting-3d.unit',
       '#/input/boundary_reflecting-3d.in.out'])

Clean(env_mv_out.RunParallel ('test_boundary_periodic-3d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_periodic-3d.in'),
      [Glob('#/' + test_path + '/boundary_periodic-3d.png'),
       'test_boundary_periodic-3d.unit',
       '#/input/boundary_periodic-3d.in.out'])

# Clean(env_mv_out.RunParallel ('test_boundary_inflow-3d.unit',
# 		bin_path + '/enzo-p', 
# 		ARGS='input/boundary_inflow-3d.in'),
#       [Glob('#/' + test_path + '/boundary_inflow-3d.png'),
#        'test_boundary_inflow-3d.unit',
#        '#/input/boundary_inflow-3d.in.out'])

Clean(env_mv_out.RunParallel ('test_boundary_outflow-3d.unit',
		bin_path + '/enzo-p', 
		ARGS='input/boundary_outflow-3d.in'),
      [Glob('#/' + test_path + '/boundary_outflow-3d.png'),
       'test_boundary_outflow-3d.unit',
       '#/input/boundary_outflow-3d.in.out'])

env.MakeMovie ("boundary_reflecting-3d.swf","test_boundary_reflecting-3d.unit",
                ARGS= test_path + "/boundary_reflecting-3d-????.png");
env.MakeMovie ("boundary_periodic-3d.swf","test_boundary_periodic-3d.unit", \
                ARGS= test_path + "/boundary_periodic-3d-????.png");
# env.MakeMovie ("boundary_inflow-3d.swf","test_boundary_inflow-3d.unit", \
#                 ARGS= test_path + "/boundary_inflow-3d-????.png");
env.MakeMovie ("boundary_outflow-3d.swf","test_boundary_outflow-3d.unit", \
                ARGS= test_path + "/boundary_outflow-3d-????.png");

#----------------------------------------------------------------------
# Mesh generation
#----------------------------------------------------------------------

Clean(env_mv_out.RunSerial ('test_mesh-balanced.unit',bin_path + '/enzo-p', 
		ARGS='input/mesh-balanced.in'),
      [Glob('#/' + test_path + '/mesh-balanced*.png'),
       '#/input/mesh-balanced.in.out'])

# Clean(env_mv_out.RunSerial ('test_mesh-unbalanced.unit',bin_path + '/enzo-p', 
# 		ARGS='input/mesh-unbalanced.in'),
#       [Glob('#/' + test_path + '/mesh-unbalanced*.png'),
#        '#/input/mesh-unbalanced.in.out'])

#----------------------------------------------------------------------
# AMR PPM
#----------------------------------------------------------------------


# serial

# Clean(env_mv_out.RunParallel ('test_adapt-L1-P1.unit',bin_path + '/enzo-p', 
# 		ARGS='input/adapt-L1-P1.in'),
#       [Glob('#/' + test_path + '/adapt-L1-P1*.png'),
#        '#/input/adapt-L1-P1.in.out'])
# env.MakeMovie ("adapt-L1-P1-mesh.swf", "test_adapt-L1-P1-mesh.unit", \
#                 ARGS= test_path + "/adapt-L1-P1-mesh-*.png");
# env.MakeMovie ("adapt-L1-P1-density.swf", "test_adapt-L1-P1-density.unit", \
#                 ARGS= test_path + "/adapt-L1-P1-density-*.png");
# 
# Clean(env_mv_out.RunParallel ('test_adapt-L2-P1.unit',bin_path + '/enzo-p', 
# 		ARGS='input/adapt-L2-P1.in'),
#       [Glob('#/' + test_path + '/adapt-L2-P1*.png'),
#        '#/input/adapt-L2-P1.in.out'])
# env.MakeMovie ("adapt-L2-P1-mesh.swf", "test_adapt-L2-P1-mesh.unit", \
#                 ARGS= test_path + "/adapt-L2-P1-mesh-*.png");
# env.MakeMovie ("adapt-L2-P1-density.swf", "test_adapt-L2-P1-density.unit", \
#                 ARGS= test_path + "/adapt-L2-P1-density-*.png");
# 
# Clean(env_mv_out.RunParallel ('test_adapt-L3-P1.unit',bin_path + '/enzo-p', 
# 		ARGS='input/adapt-L3-P1.in'),
#       [Glob('#/' + test_path + '/adapt-L3-P1*.png'),
#        '#/input/adapt-L3-P1.in.out'])
# env.MakeMovie ("adapt-L3-P1-mesh.swf", "test_adapt-L3-P1-mesh.unit", \
#                 ARGS= test_path + "/adapt-L3-P1-mesh-*.png");
# env.MakeMovie ("adapt-L3-P1-density.swf", "test_adapt-L3-P1-density.unit", \
#                 ARGS= test_path + "/adapt-L3-P1-density-*.png");
# 
# Clean(env_mv_out.RunParallel ('test_adapt-L4-P1.unit',bin_path + '/enzo-p', 
# 		ARGS='input/adapt-L4-P1.in'),
#       [Glob('#/' + test_path + '/adapt-L4-P1*.png'),
#        '#/input/adapt-L4-P1.in.out'])
# env.MakeMovie ("adapt-L4-P1-mesh.swf", "test_adapt-L4-P1-mesh.unit", \
#                 ARGS= test_path + "/adapt-L4-P1-mesh-*.png");
# env.MakeMovie ("adapt-L4-P1-density.swf", "test_adapt-L4-P1-density.unit", \
#                 ARGS= test_path + "/adapt-L4-P1-density-*.png");

Clean(env_mv_out.RunParallel ('test_adapt-L5-P1.unit',bin_path + '/enzo-p', 
		ARGS='input/adapt-L5-P1.in'),
      [Glob('#/' + test_path + '/adapt-L5-P1*.png'),
       '#/input/adapt-L5-P1.in.out'])
env.MakeMovie ("adapt-L5-P1-mesh.swf", "test_adapt-L5-P1-mesh.unit", \
                ARGS= test_path + "/adapt-L5-P1-mesh-*.png");
env.MakeMovie ("adapt-L5-P1-density.swf", "test_adapt-L5-P1-density.unit", \
                ARGS= test_path + "/adapt-L5-P1-density-*.png");



#----------------------------------------------------------------------
# PERFORMANCE
#----------------------------------------------------------------------

env.RunParallel ('test_performance-papi.unit',
                bin_path + '/enzo-p', 
                ARGS='input/performance-papi.in')


Clean(env_mv_out.RunParallel ('test_initial_png.unit',
		bin_path + '/enzo-p', 
		ARGS='input/initial_png.in'),
      [Glob('#/' + test_path + '/initial_png.png'),
       'test_initial_png.unit',
       '#/input/initial_png.in.out'])
env.MakeMovie ("initial_png.swf","test_initial_png.unit", \
                ARGS= test_path + "/initial_png-??.png");

env.RunParallel	('test_GroupProcess.unit',bin_path + '/test_GroupProcess',ARGS=ip_charm)

#----------------------------------------------------------------------
# PROBLEM
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# OUTPUT
#----------------------------------------------------------------------

output_stride_1_RUN = env.RunParallel (
   'test_output-stride-1.unit',
   bin_path + '/enzo-p', 
   ARGS='input/output-stride-1.in')

output_stride_1_C00 = env.Hdf5ToPng (
   'test_output-stride-1-C00.unit',
   'test_output-stride-1.unit',
   ARGS='output-stride-1 00');

output_stride_1_C10 = env.Hdf5ToPng (
   'test_output-stride-1-C10.unit',
   'test_output-stride-1-C00.unit',
   ARGS='output-stride-1 10');

output_stride_1 = env_mv_out.Hdf5ToPng (
   'test_output-stride-1-H5.unit',
   'test_output-stride-1-C10.unit',
   ARGS='output-stride-1 20');

env.Requires(output_stride_1,    output_stride_1_C10)
env.Requires(output_stride_1_C10,output_stride_1_C00)
env.Requires(output_stride_1_C00,output_stride_1_RUN)

Clean(output_stride_1,
      [Glob('#/' + test_path + '/output-stride-1*.png'),
       'test_output-stride-1.unit',
       '#/input/output-stride-1.in.out'])

Clean(env_mv_out.RunParallel ('test_output-stride-2.unit',
		bin_path + '/enzo-p', 
		ARGS='input/output-stride-2.in'),
      [Glob('#/' + test_path + '/output-stride-2.png'),
       'test_output-stride-2.unit',
       '#/input/output-stride-2.in.out'])

Clean(env_mv_out.RunParallel ('test_output-stride-3.unit',
		bin_path + '/enzo-p', 
		ARGS='input/output-stride-3.in'),
      [Glob('#/' + test_path + '/output-stride-3.png'),
       'test_output-stride-3.unit',
       '#/input/output-stride-3.in.out'])

# env.MakeMovie('ppm-density.mpg',      '#/ppm-density-00000.png', ARGS='ppm-density-?????.png')

# env.RunParallel('test_affinity.unit',   bin_path + '/test_Affinity')

	# env.RunParallel('test_mpi.unit',        bin_path + '/test_Mpi')
# env.RunParallel('test_jacobi.unit',        bin_path + '/test_jacobi')

# Prevent concurrent running of parallel jobs

SideEffect('log.txt', 
     [ 'test_GroupProcess.unit', 
       'method_ppm-1.unit',
       'method_ppm-8.unit'])



