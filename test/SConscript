Import('env')
Import('parallel_run')
Import('type')
Import('serial_run')

# O test_FieldFace.cpp
# O test_Mpi.cpp
# O test_ParallelAffinity.cpp
# O test_ParallelGroup.cpp
# O test_Layout.cpp
# O test_tree.cpp

# X test_Error.cpp
# X test_FieldBlock.cpp
# X test_FieldDescr.cpp
# X test_FileHdf5.cpp
# X test_FileIfrit.cpp
# X test_Memory.cpp
# X test_Mesh.cpp
# X test_Monitor.cpp
# X test_Parallel.cpp
# X test_Parameters.cpp
# X test_Parse.cpp
# X test_Performance.cpp
# X test_ppml.cpp
# X test_TreeK.cpp

# Define a test for running unit tests

copy_bin     = Builder(action = "cp $SOURCE $ARGS");
run_parse    = Builder(action = serial_run   +  "$SOURCE < $ARGS >  $TARGET 2>&1")
run_serial   = Builder(action = serial_run   +  "$SOURCE $ARGS > $TARGET 2>&1")
run_parallel = Builder(action = parallel_run + " $SOURCE $ARGS > $TARGET 2>&1")
run_method   = Builder(action = serial_run   + " $SOURCE > $ARGS 2>&1")
run_tree     = Builder(action = serial_run   + " $SOURCE $ARGS > $OUT 2>&1")
make_movie   = Builder(action = "convert ${ARGS} $TARGET; chmod a+r $TARGET; rm ${ARGS}")

env.Append(BUILDERS = { 'RunSerial'   : run_serial } ) 
env.Append(BUILDERS = { 'RunParallel' : run_parallel } )
env.Append(BUILDERS = { 'RunParse'    : run_parse } )
env.Append(BUILDERS = { 'MakeMovie'   : make_movie } )
env.Append(BUILDERS = { 'RunMethod'   : run_method } )
env.Append(BUILDERS = { 'RunTree'     : run_tree } )

type_path = type + '/'

#----------------------------------------------------------------------
# DISK COMPONENT          
#----------------------------------------------------------------------
env.RunSerial(type_path + 'test_FileHdf5.unit',    '#/bin/test_FileHdf5')
env.RunSerial(type_path + 'test_FileIfrit.unit',   '#/bin/test_FileIfrit')
#----------------------------------------------------------------------
# ENZO COMPONENT          
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ERROR COMPONENT         
#----------------------------------------------------------------------
env.RunSerial(type_path + 'test_Error.unit',       '#/bin/test_Error')
#----------------------------------------------------------------------
# FIELD COMPONENT         
#----------------------------------------------------------------------
env.RunSerial(type_path + 'test_FieldBlock.unit','#/bin/test_FieldBlock')
env.RunSerial(type_path + 'test_FieldDescr.unit','#/bin/test_FieldDescr')
env.RunSerial(type_path + 'test_FieldFace.unit', '#/bin/test_FieldFace')
#----------------------------------------------------------------------
# MEMORY COMPONENT        
#----------------------------------------------------------------------
env.RunSerial(type_path + 'test_Memory.unit',      '#/bin/test_Memory')
#----------------------------------------------------------------------
# METHOD COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# MESH COMPONENT          
#----------------------------------------------------------------------
env.RunSerial(type_path + 'test_Mesh.unit',   '#/bin/test_Mesh')
env.RunSerial(type_path + 'test_Patch.unit',  '#/bin/test_Patch')
env.RunSerial(type_path + 'test_Block.unit',  '#/bin/test_Block')
#----------------------------------------------------------------------
# MONITOR COMPONENT       
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# PARALLEL COMPONENT      
#----------------------------------------------------------------------
env.RunSerial(type_path + 'test_Layout.unit',      '#/bin/test_Layout')
#----------------------------------------------------------------------
# PARAMETERS COMPONENT    
#----------------------------------------------------------------------
env.RunSerial(type_path + 'test_Parameters.unit',  '#/bin/test_Parameters')
#----------------------------------------------------------------------
# PARTICLE COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# PERFORMANCE COMPONENT   
#----------------------------------------------------------------------
env.RunSerial(type_path + 'test_Performance.unit', '#/bin/test_Performance')
env.RunSerial(type_path + 'test_Papi.unit',        '#/bin/test_Papi')
#----------------------------------------------------------------------
# PORTAL COMPONENT        
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# SIMULATION COMPONENT    
#----------------------------------------------------------------------
# (test_Simulation removed since supplanted by enzo-p)
#----------------------------------------------------------------------
# TASK COMPONENT          
#----------------------------------------------------------------------





#----------------------------------------------------------------------
# MESH PROTOTYPE
#----------------------------------------------------------------------
Clean(env.RunSerial
      (type_path + 'test_TreeK-D2-R2-L6.unit', 
       '#/bin/test_TreeK',
       ARGS='2 2 6 input/Enzo-P-2048.png'),
      Glob('../TreeK-D=2-R=2-L=6*png'))
Clean(env.RunSerial
      (type_path + 'test_TreeK-D2-R2-L7.unit', 
       '#/bin/test_TreeK',
       ARGS='2 2 7 input/Enzo-P-2048.png'),
      Glob('../TreeK-D=2-R=2-L=7*png'))
Clean(env.RunSerial
      (type_path + 'test_TreeK-D2-R2-L8.unit',
       '#/bin/test_TreeK',
       ARGS='2 2 8 input/Enzo-P-2048.png'),
      Glob('../TreeK-D=2-R=2-L=8*png'))
# Clean(env.RunSerial
#       (type_path + 'test_TreeK-D2-R2-L9.unit',
#        '#/bin/test_TreeK',
#        ARGS='2 2 9 input/Enzo-P-2048.png'),
#       Glob('../TreeK-D=2-R=2-L=9*png'))
# Clean(env.RunSerial
#       (type_path + 'test_TreeK-D2-R2-L10.unit',
#        '#/bin/test_TreeK',
#        ARGS='2 2 10 input/Enzo-P-2048.png'),
#       Glob('../TreeK-D=2-R=2-L=10*png'))

Clean(env.RunSerial
      (type_path + 'test_TreeK-D2-R4-L6.unit',
       '#/bin/test_TreeK',
       ARGS='2 4 6 input/Enzo-P-2048.png'),
      Glob('../TreeK-D=2-R=4-L=6*png'))
Clean(env.RunSerial
      (type_path + 'test_TreeK-D2-R4-L8.unit',
       '#/bin/test_TreeK',
       ARGS='2 4 8 input/Enzo-P-2048.png'),
      Glob('../TreeK-D=2-R=4-L=8*png'))
# Clean(env.RunSerial
#       (type_path + 'test_TreeK-D2-R4-L10.unit',
#        '#/bin/test_TreeK',
#        ARGS='2 4 10 input/Enzo-P-2048.png'),
#       Glob('../TreeK-D=2-R=4-L=10*png'))

Clean(env.RunSerial
      (type_path + 'test_TreeK-D3-R2-L4.unit',
       '#/bin/test_TreeK',
       ARGS='3 2 4'),
      Glob('../TreeK-D=3-R=2-L=4*png'))
Clean(env.RunSerial
      (type_path + 'test_TreeK-D3-R2-L5.unit',
       '#/bin/test_TreeK', ARGS='3 2 5'),
      Glob('../TreeK-D=3-R=2-L=5*png'))
Clean(env.RunSerial
      (type_path + 'test_TreeK-D3-R2-L6.unit',
       '#/bin/test_TreeK', ARGS='3 2 6'),
      Glob('../TreeK-D=3-R=2-L=6*png'))
# Clean(env.RunSerial
#       (type_path + 'test_TreeK-D3-R2-L7.unit',
#        '#/bin/test_TreeK', ARGS='3 2 7'),
#       Glob('../TreeK-D=3-R=2-L=7*png'))
# Clean(env.RunSerial
#       (type_path + 'test_TreeK-D3-R2-L8.unit',
#        '#/bin/test_TreeK', ARGS='3 2 8'),
#       Glob('../TreeK-D=3-R=2-L=8*png'))

Clean(env.RunSerial
      (type_path + 'test_TreeK-D3-R4-L4.unit',
       '#/bin/test_TreeK', ARGS='3 4 4'),
      Glob('../TreeK-D=3-R=4-L=4*png'))
Clean(env.RunSerial
      (type_path + 'test_TreeK-D3-R4-L6.unit',
       '#/bin/test_TreeK', ARGS='3 4 6'),
      Glob('../TreeK-D=3-R=4-L=6*png'))
# Clean(env.RunSerial	
#       (type_path + 'test_TreeK-D3-R4-L8.unit',
#        '#/bin/test_TreeK', ARGS='3 4 8'),
#       Glob('../TreeK-D=3-R=4-L=8*png'))

# Clean(env.RunSerial
#       (type_path + 'test_ppml_implosion.unit',
#        '#/bin/test_ppml', ARGS='ppml-implosion3  20 10 10'),
#       Glob('../*-ppml-implosion3-*png'))
# Clean(env.RunSerial
#       (type_path + 'test_ppml_blast.unit',
#        '#/bin/test_ppml', ARGS='ppml-blast       20 10 10'),
#       Glob('../*-ppml-blast-*png'))
# Clean(env.RunSerial
#       (type_path + 'test_ppm_image.unit',
#        '#/bin/test_ppm', ARGS='ppm-image       100 30 10'),
#       Glob('../*-ppm-image-*png'))
# Clean(env.RunSerial
#       (type_path + 'test_ppm_implosion.unit',
#        '#/bin/test_ppm', ARGS='ppm-implosion   64 10 10'),
#       Glob('../*-ppm-implosion-*png'))
# Clean(env.RunSerial
#       (type_path + 'test_ppm_implosion3.unit',
#        '#/bin/test_ppm', ARGS='ppm-implosion3   24 10 10'),
#       Glob('../*-ppm-implosion3-*png'))

Clean(env.RunSerial
      (type_path + 'test_Monitor.unit',
       '#/bin/test_Monitor'),
      Glob('../monitor_image_*png'))

#----------------------------------------------------------------------
# TEST INPUT PARAMETER PARSER
#----------------------------------------------------------------------

env.RunParse(type_path + 'test_parse_groups.unit',     '#/bin/test_Parse', ARGS='input/parse_groups.in')
env.RunParse(type_path + 'test_parse_integer.unit',    '#/bin/test_Parse', ARGS='input/parse_integer.in')
env.RunParse(type_path + 'test_parse_list.unit',       '#/bin/test_Parse', ARGS='input/parse_list.in')
env.RunParse(type_path + 'test_parse_logical.unit',    '#/bin/test_Parse', ARGS='input/parse_logical.in')
env.RunParse(type_path + 'test_parse_scalar.unit',     '#/bin/test_Parse', ARGS='input/parse_scalar.in')
env.RunParse(type_path + 'test_parse_implosion.unit',  '#/bin/test_Parse', ARGS='input/parse_implosion.in')
env.RunParse(type_path + 'test_parse_shock-pool.unit', '#/bin/test_Parse', ARGS='input/parse_shock-pool.in')

#----------------------------------------------------------------------
# TEST FULL APPLICATIONS
#----------------------------------------------------------------------


Clean(env.RunParallel (type_path + 'test_enzo-p_1.unit',
		'#/bin/enzo-p', 
		ARGS='input/test_enzo-p_1.in'),
      [Glob('../enzo-p-??????.?.png'),type_path + 'test_enzo-p_1.unit'])

Clean(env.RunParallel (type_path + 'test_enzo-p_2.unit',
		'#/bin/enzo-p', 
		ARGS='input/test_enzo-p_2.in'),
      [Glob('../enzo-p_2-??????.?.png'),type_path + 'test_enzo-p_2.unit'])


if (type == "mpi"):
   env.RunParallel	(type_path + 'test_GroupProcess.unit','#/bin/test_GroupProcess',ARGS='4')
else:
   env.RunParallel	(type_path + 'test_GroupProcess.unit','#/bin/test_GroupProcess',ARGS='1')


# env.MakeMovie('ppm-density.mpg',      '#/ppm-density-00000.png', ARGS='ppm-density-?????.png')

# env.RunParallel(type_path + 'test_affinity.unit',   '#/bin/test_Affinity')

	# env.RunParallel(type_path + 'test_mpi.unit',        '#/bin/test_Mpi')
# env.RunParallel(type_path + 'test_jacobi.unit',        '#/bin/test_jacobi')

# Prevent concurrent running of parallel jobs

SideEffect('log.txt', 
     [ type_path + 'test_GroupProcess.unit', 
       type_path + 'test_enzo-p_1.unit',
       type_path + 'test_enzo-p_2.unit'])



