Import('env')
Import('parallel_run')
Import('type')
Import('serial_run')

bin_path = '#/bin/'+type

env['COPY'] = ''

# Define a test for running unit tests

copy_bin     = Builder(action = "cp $SOURCE $ARGS");
run_serial   = Builder(action = serial_run   +  "$SOURCE $ARGS > $TARGET 2>&1; $COPY")
run_parallel = Builder(action = parallel_run + " $SOURCE $ARGS > $TARGET 2>&1; $COPY")
run_method   = Builder(action = serial_run   + " $SOURCE > $ARGS 2>&1")
make_movie   = Builder(action = "convert ${ARGS} $TARGET; chmod a+r $TARGET; rm ${ARGS}")

env.Append(BUILDERS = { 'RunSerial'   : run_serial } ) 
env.Append(BUILDERS = { 'RunParallel' : run_parallel } )
env.Append(BUILDERS = { 'MakeMovie'   : make_movie } )
env.Append(BUILDERS = { 'RunMethod'   : run_method } )

env_mv_png  = env.Clone(COPY = 'mv *.png test/' + type)
env_mv_test = env.Clone(COPY = 'mv test*out test*in test/' + type)

#----------------------------------------------------------------------
# DISK COMPONENT          
#----------------------------------------------------------------------
Clean(env.RunSerial
      ('test_FileHdf5.unit',  bin_path + '/test_FileHdf5'),
      '#test_disk.h5')
       
Clean(env.RunSerial
      ('test_FileIfrit.unit', bin_path + '/test_FileIfrit'),
      '#/FileIfrit_test.bin')
#----------------------------------------------------------------------
# ENZO COMPONENT          
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ERROR COMPONENT         
#----------------------------------------------------------------------
env.RunSerial('test_Error.unit',       bin_path + '/test_Error')
#----------------------------------------------------------------------
# FIELD COMPONENT         
#----------------------------------------------------------------------
env.RunSerial('test_FieldBlock.unit',bin_path + '/test_FieldBlock')
env.RunSerial('test_FieldDescr.unit',bin_path + '/test_FieldDescr')
env.RunSerial('test_FieldFace.unit', bin_path + '/test_FieldFace')
env.RunSerial('test_ItField.unit',   bin_path + '/test_ItField')
#----------------------------------------------------------------------
# IO COMPONENT        
#----------------------------------------------------------------------
env.RunSerial('test_ItReduce.unit',      bin_path + '/test_ItReduce')
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# MEMORY COMPONENT        
#----------------------------------------------------------------------
env.RunSerial('test_Memory.unit',      bin_path + '/test_Memory')
#----------------------------------------------------------------------
# METHOD COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# MESH COMPONENT          
#----------------------------------------------------------------------
env.RunSerial('test_Hierarchy.unit', bin_path + '/test_Hierarchy')
env.RunSerial('test_Patch.unit',     bin_path + '/test_Patch')
env.RunSerial('test_Block.unit',     bin_path + '/test_Block')
#----------------------------------------------------------------------
# MONITOR COMPONENT       
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# PARALLEL COMPONENT      
#----------------------------------------------------------------------
env.RunSerial('test_Layout.unit',      bin_path + '/test_Layout')
#----------------------------------------------------------------------
# PARAMETERS COMPONENT    
#----------------------------------------------------------------------
Clean(env_mv_test.RunSerial
      ('test_Parameters.unit',  bin_path + '/test_Parameters'),
      ['#/test.in','#/test1.out','#/test2.out'])
#----------------------------------------------------------------------
# PARTICLE COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# PERFORMANCE COMPONENT   
#----------------------------------------------------------------------
env.RunSerial('test_Performance.unit', bin_path + '/test_Performance')
env.RunSerial('test_Papi.unit',        bin_path + '/test_Papi')
#----------------------------------------------------------------------
# PORTAL COMPONENT        
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# SIMULATION COMPONENT    
#----------------------------------------------------------------------
# (test_Simulation removed since supplanted by enzo-p)
#----------------------------------------------------------------------
# TASK COMPONENT          
#----------------------------------------------------------------------





#----------------------------------------------------------------------
# MESH PROTOTYPE
#----------------------------------------------------------------------


Clean(env_mv_png.RunSerial
      ('test_TreeK-D2-R2-L6.unit', 
       bin_path + '/test_TreeK',
       ARGS='2 2 6 input/Enzo-P-2048.png'),
      Glob('#/TreeK-D=2-R=2-L=6*png'))
Clean(env_mv_png.RunSerial
      ('test_TreeK-D2-R2-L7.unit', 
       bin_path + '/test_TreeK',
       ARGS='2 2 7 input/Enzo-P-2048.png'),
      Glob('#/TreeK-D=2-R=2-L=7*png'))
Clean(env_mv_png.RunSerial
      ('test_TreeK-D2-R2-L8.unit',
       bin_path + '/test_TreeK',
       ARGS='2 2 8 input/Enzo-P-2048.png'),
      Glob('#/TreeK-D=2-R=2-L=8*png'))

Clean(env_mv_png.RunSerial
      ('test_TreeK-D2-R4-L6.unit',
       bin_path + '/test_TreeK',
       ARGS='2 4 6 input/Enzo-P-2048.png'),
      Glob('#/TreeK-D=2-R=4-L=6*png'))
Clean(env_mv_png.RunSerial
      ('test_TreeK-D2-R4-L8.unit',
       bin_path + '/test_TreeK',
       ARGS='2 4 8 input/Enzo-P-2048.png'),
      Glob('#/TreeK-D=2-R=4-L=8*png'))

Clean(env_mv_png.RunSerial
      ('test_TreeK-D3-R2-L4.unit',
       bin_path + '/test_TreeK',
       ARGS='3 2 4'),
      Glob('#/TreeK-D=3-R=2-L=4*png'))
Clean(env_mv_png.RunSerial
      ('test_TreeK-D3-R2-L5.unit',
       bin_path + '/test_TreeK', ARGS='3 2 5'),
      Glob('#/TreeK-D=3-R=2-L=5*png'))
Clean(env_mv_png.RunSerial
      ('test_TreeK-D3-R2-L6.unit',
       bin_path + '/test_TreeK', ARGS='3 2 6'),
      Glob('#/TreeK-D=3-R=2-L=6*png'))

Clean(env_mv_png.RunSerial
      ('test_TreeK-D3-R4-L4.unit',
       bin_path + '/test_TreeK', ARGS='3 4 4'),
      Glob('#/TreeK-D=3-R=4-L=4*png'))
Clean(env_mv_png.RunSerial
      ('test_TreeK-D3-R4-L6.unit',
       bin_path + '/test_TreeK', ARGS='3 4 6'),
      Glob('#/TreeK-D=3-R=4-L=6*png'))

# Clean(env.RunSerial
#       ('test_ppml_implosion.unit',
#        bin_path + '/test_ppml', ARGS='ppml-implosion3  20 10 10'),
#       Glob('#/*-ppml-implosion3-*png'))
# Clean(env.RunSerial
#       ('test_ppml_blast.unit',
#        bin_path + '/test_ppml', ARGS='ppml-blast       20 10 10'),
#       Glob('#/*-ppml-blast-*png'))
# Clean(env.RunSerial
#       ('test_ppm_image.unit',
#        bin_path + '/test_ppm', ARGS='ppm-image       100 30 10'),
#       Glob('#/*-ppm-image-*png'))
# Clean(env.RunSerial
#       ('test_ppm_implosion.unit',
#        bin_path + '/test_ppm', ARGS='ppm-implosion   64 10 10'),
#       Glob('#/*-ppm-implosion-*png'))
# Clean(env.RunSerial
#       ('test_ppm_implosion3.unit',
#        bin_path + '/test_ppm', ARGS='ppm-implosion3   24 10 10'),
#       Glob('#/*-ppm-implosion3-*png'))
 
Clean(env.RunSerial
      ('test_Monitor.unit',
       bin_path + '/test_Monitor'),
      Glob('#/out.png'))

#----------------------------------------------------------------------
# TEST INPUT PARAMETER PARSER
#----------------------------------------------------------------------

env.RunSerial('test_parse_groups.unit',     bin_path + '/test_Parse', ARGS='input/parse_groups.in')
env.RunSerial('test_parse_integer.unit',    bin_path + '/test_Parse', ARGS='input/parse_integer.in')
env.RunSerial('test_parse_list.unit',       bin_path + '/test_Parse', ARGS='input/parse_list.in')
env.RunSerial('test_parse_logical.unit',    bin_path + '/test_Parse', ARGS='input/parse_logical.in')
env.RunSerial('test_parse_scalar.unit',     bin_path + '/test_Parse', ARGS='input/parse_scalar.in')
env.RunSerial('test_parse_implosion.unit',  bin_path + '/test_Parse', ARGS='input/parse_implosion.in')
env.RunSerial('test_parse_shock-pool.unit', bin_path + '/test_Parse', ARGS='input/parse_shock-pool.in')
env.RunSerial('test_parse_include.unit',    bin_path + '/test_Parse', ARGS='input/parse_include.in')

#----------------------------------------------------------------------
# TEST FULL APPLICATIONS
#----------------------------------------------------------------------


Clean(env_mv_png.RunSerial ('test_enzo-p_1.unit',
		bin_path + '/enzo-p', 
		ARGS='input/test_enzo-p_1.in'),
      [Glob('#/enzo-p_1-??????-*.png'),  # field added in non-charm
       'test_enzo-p_1.unit',
       '#/input/test_enzo-p_1.in.out'])

Clean(env_mv_png.RunParallel ('test_enzo-p_2.unit',
		bin_path + '/enzo-p', 
		ARGS='input/test_enzo-p_2.in'),
      [Glob('#/enzo-p_2-??????-*.png'),  # field added in non-charm
       Glob('#/enzo-p_2-??????.png'),    # field not added in charm
       'test_enzo-p_2.unit',
       '#/input/test_enzo-p_2.in.out'])


if (type == "serial"):
   env.RunParallel	('test_GroupProcess.unit',bin_path + '/test_GroupProcess',ARGS='1')
else:
   env.RunParallel	('test_GroupProcess.unit',bin_path + '/test_GroupProcess',ARGS='4')


# env.MakeMovie('ppm-density.mpg',      '#/ppm-density-00000.png', ARGS='ppm-density-?????.png')

# env.RunParallel('test_affinity.unit',   bin_path + '/test_Affinity')

	# env.RunParallel('test_mpi.unit',        bin_path + '/test_Mpi')
# env.RunParallel('test_jacobi.unit',        bin_path + '/test_jacobi')

# Prevent concurrent running of parallel jobs

SideEffect('log.txt', 
     [ 'test_GroupProcess.unit', 
       'test_enzo-p_1.unit',
       'test_enzo-p_2.unit'])



