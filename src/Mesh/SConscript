#------------------------------
# DIRECTORIES
#------------------------------

#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('type')
Import('use_papi')

Import('bin_path')
Import('inc_path')
Import('lib_path')

#------------------------------
# DEPENDENCIES
#------------------------------

components = [ 
              'field', 
              'simulation','method', 'io',
	      'disk','memory','parallel',
              'parameters',
              'error','monitor','performance', 
              'test','cello','external']

if (use_papi):
	components = components + ['papi','pfm']

libraries = ['png','hdf5']

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('mesh*hpp')]
sources  = [Glob('mesh*cpp')]

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries])

#------------------------------
# TARGETS
#------------------------------

libraries = env.Library ('mesh', [sources])

if (type == "charm"):
   sources      = sources      + ['../Main/main_mesh.cpp']

test_block     = env.Program (['test_Block.cpp', sources])
test_hierarchy = env.Program (['test_Hierarchy.cpp',  sources])
test_patch     = env.Program (['test_Patch.cpp', sources])
test_tree      = env.Program (['test_Tree.cpp', sources])

if (type == "charm"):
   env.CharmBuilder('mesh.decl.h','mesh.ci',ARG = 'mesh')
   env.CharmBuilder('mesh.def.h', 'mesh.ci',ARG = 'mesh')
   includes = includes + ['mesh.decl.h','mesh.def.h']

binaries = [test_hierarchy, test_patch, test_block, test_tree ];

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-bin',env.Install (bin_path,binaries))
env.Alias('install-inc',env.Install (inc_path,includes))
env.Alias('install-lib',env.Install (lib_path,libraries))
