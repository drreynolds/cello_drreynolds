#------------------------------
# DIRECTORIES
#------------------------------

# SConscript('tree/SConscript')

#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('parallel_type')

#------------------------------
# DEPENDENCIES
#------------------------------

components = ['error','memory','monitor', 'parallel', 'parameters', 'field', 'cello']
libraries  = ['png']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries])

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('mesh*hpp')]
sources  = [Glob('mesh*cpp')]

#------------------------------
# TARGETS
#------------------------------

if (parallel_type == "charm"):
	test = 'test_TreeK'
	env.CharmBuilder(test + '.decl.h',test + '.ci',ARG = test)
	env.Depends(env.Object(test + '.cpp'),test + '.decl.h')
	test = 'test_Mesh'
	env.CharmBuilder(test + '.decl.h',test + '.ci',ARG = test)
	env.Depends(env.Object(test + '.cpp'),test + '.decl.h')
	test = 'test_Patch'
	env.CharmBuilder(test + '.decl.h',test + '.ci',ARG = test)
	env.Depends(env.Object(test + '.cpp'),test + '.decl.h')
	test = 'test_DataDescr'
	env.CharmBuilder(test + '.decl.h',test + '.ci',ARG = test)
	env.Depends(env.Object(test + '.cpp'),test + '.decl.h')

libraries = env.Library ('mesh', [sources])

test_mesh       = env.Program (['test_Mesh.cpp',     sources])
test_patch      = env.Program (['test_Patch.cpp',    sources])
test_tree       = env.Program (['test_TreeK.cpp',    sources])
test_data_descr = env.Program (['test_DataDescr.cpp',sources])

tests     = [test_mesh, test_patch, test_tree, test_data_descr];

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-inc',env.Install ('#/include',includes))
env.Alias('install-lib',env.Install ('#/lib',    libraries))
env.Alias('install-bin',env.Install ('#/bin',    tests))
