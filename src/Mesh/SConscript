#------------------------------
# DIRECTORIES
#------------------------------

#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('type')

#------------------------------
# DEPENDENCIES
#------------------------------

components = ['simulation','method', 
              'field', 
              'memory','parallel',
              'parameters','monitor',
              'performance', 'error',
              'cello']
libraries  = ['png']

#if (type == "charm"):
#   components = components + ['enzo']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries])

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('mesh*hpp')]
sources  = [Glob('mesh*cpp')]
sources_tree = [Glob('mesh*Node*cpp'), Glob('mesh*Tree*cpp')]

#------------------------------
# TARGETS
#------------------------------

libraries = env.Library ('mesh', [sources])

if (type == "charm"):
   sources = sources + ['../main_mesh.cpp']

test_block = env.Program (['test_Block.cpp', sources])
test_mesh  = env.Program (['test_Mesh.cpp',  sources])
test_patch = env.Program (['test_Patch.cpp', sources])
test_tree  = env.Program (['test_TreeK.cpp', sources_tree])

if (type == "charm"):
   env.CharmBuilder('mesh.decl.h','mesh.ci',ARG = 'mesh')
   env.CharmBuilder('mesh.def.h', 'mesh.ci',ARG = 'mesh')
   includes = includes + ['mesh.decl.h','mesh.def.h']

binaries = [test_mesh, test_patch, test_block, test_tree ];

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-inc',env.Install ('#/include',  includes))
env.Alias('install-lib',env.Install ('#/lib',      libraries))
env.Alias('install-bin',env.Install ('#/bin/'+type,binaries))
