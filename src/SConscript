Import('env')
Import('parallel_type')

# Define tests for running cccc

# cccc      = Builder(action = "cccc --outdir=$TARGET `find src -name '*.cpp'`")
# env = Environment(BUILDERS = {'Cccc': cccc})
# env.Cccc("cccc");

SConscript('Enzo/SConscript')

SConscript('Disk/SConscript')
SConscript('Distribute/SConscript')
SConscript('Error/SConscript')
SConscript('Field/SConscript')
# SConscript('Global/SConscript')
SConscript('Memory/SConscript')
SConscript('Mesh/SConscript')
# SConscript('Method/SConscript')
SConscript('Monitor/SConscript')
SConscript('Parallel/SConscript')
SConscript('Parameters/SConscript')
SConscript('Particle/SConscript')
SConscript('Performance/SConscript')
SConscript('Portal/SConscript')
SConscript('Schedule/SConscript')
SConscript('Simulation/SConscript')
SConscript('Task/SConscript')
SConscript('Test/SConscript')
SConscript('Method/SConscript')


components = ['schedule','error','memory','monitor','parameters','simulation','enzo','parallel','enzo-ppm','enzo-ppml','mesh','method','field','cello']

libraries  = ['png', '$FORTRANLIBS','m']


env = env.Clone(LIBS=[components,libraries])


binaries = env.Program(['enzo-p.cpp'])
if (parallel_type == "charm"):
	test = 'enzo-p'
	testc = 'enzo_p' # required since class name cannot contain '-'
	env.CharmBuilder(testc	 + '.decl.h',test + '.ci',ARG = testc)
	env.Depends(env.Object(test + '.cpp'),testc + '.decl.h')


includes = [Glob('cello*hpp'), Glob('cello*def')]
sources  = [Glob('cello*cpp')]

libraries = env.Library ('cello', [sources])

env.Alias('install-lib', env.Install ('#/lib',    libraries))
env.Alias('install-inc', env.Install ('#/include',includes))
env.Alias('install-bin', env.Install ('#/bin',    binaries))
