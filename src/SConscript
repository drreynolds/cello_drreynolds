Import('env')
Import('type')

# Define tests for running cccc

# cccc      = Builder(action = "cccc --outdir=$TARGET `find src -name '*.cpp'`")
# env = Environment(BUILDERS = {'Cccc': cccc})
# env.Cccc("cccc");

SConscript('Enzo/SConscript')

SConscript('Disk/SConscript')
SConscript('Error/SConscript')
SConscript('Field/SConscript')
SConscript('Memory/SConscript')
SConscript('Mesh/SConscript')
SConscript('Monitor/SConscript')
SConscript('Parallel/SConscript')
SConscript('Parameters/SConscript')
SConscript('Particle/SConscript')
SConscript('Performance/SConscript')
SConscript('Portal/SConscript')
SConscript('Simulation/SConscript')
SConscript('Test/SConscript')
SConscript('Method/SConscript')


components = ['error','memory','monitor','parameters','simulation','enzo','parallel','enzo-ppm','enzo-ppml','mesh','method','field','cello']

libraries  = ['png', '$FORTRANLIBS','m']


env = env.Clone(LIBS=[components,libraries])

includes = [Glob('cello*hpp'), Glob('cello*def'), Glob('test*hpp'), 'main.hpp']
sources  = [Glob('cello*cpp'),Glob('main*cpp')]

if (type == "charm"):
   env.CharmBuilder('main.decl.h','main.ci',ARG = 'main')
   env.CharmBuilder('main.def.h', 'main.ci',ARG = 'main')
   includes = includes + ['main.decl.h','main.def.h']

   env.CharmBuilder('main_enzo.decl.h','main_enzo.ci',ARG = 'main_enzo')
   env.CharmBuilder('main_enzo.def.h', 'main_enzo.ci',ARG = 'main_enzo')
   includes = includes + ['main_enzo.decl.h','main_enzo.def.h']

   env.CharmBuilder ('main_simulation.decl.h','main_simulation.ci',ARG = 'main_simulation')
   env.CharmBuilder ('main_simulation.def.h', 'main_simulation.ci',ARG = 'main_simulation')
   includes = includes + ['main_simulation.decl.h','main_simulation.def.h']

   env.CharmBuilder('main_mesh.decl.h','main_mesh.ci',ARG = 'main_mesh')
   env.CharmBuilder('main_mesh.def.h', 'main_mesh.ci',ARG = 'main_mesh')
   includes = includes + ['main_mesh.decl.h','main_mesh.def.h']

libraries = env.Library ('cello', [sources])

env.Alias('install-lib', env.Install ('#/lib',    libraries))
env.Alias('install-inc', env.Install ('#/include',includes))
