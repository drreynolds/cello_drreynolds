#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('type')
Import('use_papi')
Import('use_lcaperf')

Import('bin_path')
Import('inc_path')
Import('lib_path')

#------------------------------
# DEPENDENCIES
#------------------------------

components = []

if (type == "charm"):
	components.append(['charm'])

components.append(['enzo','simulation', 'problem',
	      'mesh', 'field',
	      'io', 'disk','memory','parallel',
	      'parameters', 
	      'error', 'monitor', 'performance',
	      'test','cello','external'])

if (use_lcaperf):
	components.append(['lcaperf'])
if (use_papi):
	components.append(['papi','pfm'])


components.append(['hdf5'])

libraries  = ['png','$FORTRANLIBS']

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('*enzo*hpp'),'fortran.h']

sources  = [Glob('enzo_*cpp'), 
	    'Grid_ComputeGammaField.cpp',
	    'Grid_ComputePressure.cpp',
	    'Grid_ComputePressureDualEnergyFormalism.cpp',
	    'Grid_ComputeTemperatureField.cpp',
	    'Grid_IdentifyPhysicalQuantities.cpp',
	    'Grid_IdentifySpeciesFields.cpp',
	    'Grid_SetExternalBoundaryValues.cpp',
	    'Grid_SetMinimumSupport.cpp',
	    'Grid_SolveHydroEquations.cpp',
	    'Grid_SolveMHDEquations.cpp',
	    'calcdiss.F',
	    'calc_dt.F',
	    'euler.F',
	    'inteuler.F',
	    'intvar.F',
	    'pgas2d_dual.F',
	    'pgas2d.F',
	    'ppm_de.F',
	    'twoshock.F',
	    'xeuler_sweep.F',
	    'yeuler_sweep.F',
	    'zeuler_sweep.F',
	    'CosmologyGetUnits.cpp',
	    'PPML_Conservative.F',
	    'PPML_HLLD.F',
	    'PPML_MAIN.F',
	    'PPML_monot.F',
	    'PPML_potokx.F',
	    'PPML_potoky.F',
	    'PPML_potokz.F',
	    'PPML_Primitive.F',
	    'PPML_sub.F',
	    'PPML_TimeStep.F',
	    'FindField.cpp']


charm_main = []
if (type == "charm"):
   includes.append(['enzo.decl.h','enzo.def.h'])
   charm_main = ['../Cello/main_enzo.cpp']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries])

#------------------------------
# TARGETS
#------------------------------

libraries   = env.Library ('enzo', sources)

test_enzo_p = env.Program (['enzo-p.cpp', charm_main])

binaries = [test_enzo_p]

if (type == "charm"):
   env.CharmBuilder('enzo.decl.h','enzo.ci',ARG = 'enzo')
   env.CharmBuilder('enzo.def.h', 'enzo.ci',ARG = 'enzo')

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-bin',env.Install (bin_path,binaries))
env.Alias('install-bin',env.Install ('#/bin/',binaries))

env.Alias('install-inc',env.Install (inc_path,includes))
env.Alias('install-lib',env.Install (lib_path,libraries))



