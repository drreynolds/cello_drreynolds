#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('use_papi')

Import('bin_path')
Import('inc_path')
Import('lib_path')

#------------------------------
# DEPENDENCIES
#------------------------------

components = []

components.append(['charm'])

components.append(['enzo','simulation', 'problem',
	      'comm', 'control', 'mesh', 'field',
	      'io', 'disk','memory',
	      'parameters', 
	      'error', 'monitor', 'parallel','performance',
	      'test','cello','external'])

if (use_papi):
	components.append(['papi','pfm'])


components.append(['hdf5','z'])

libraries  = ['png','grackle','$FORTRANLIBS']

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('*enzo*hpp'),'fortran.h']

sources  = [Glob('enzo_*cpp'), 
    	    'calcdiss.F',
	    'calc_dt.F',
	    'CosmologyGetUnits.cpp',
	    'euler.F',
	    'FindField.cpp',
	    'Grid_ComputeGammaField.cpp',
	    'Grid_ComputePressure.cpp',
	    'Grid_ComputePressureDualEnergyFormalism.cpp',
	    'Grid_ComputeTemperatureField.cpp',
	    'Grid_IdentifyPhysicalQuantities.cpp',
	    'Grid_IdentifySpeciesFields.cpp',
	    'Grid_SetMinimumSupport.cpp',
	    'Grid_SolveHydroEquations.cpp',
	    'Grid_SolveMHDEquations.cpp',
	    'interp1d.F',
	    'interp2d.F',
	    'interp3d.F',
	    'interpolate.F',
	    'inteuler.F',
	    'inteuler.F',
	    'intvar.F',
	    'int_lin3d.F',
	    'ngpinterp.F',
	    'cicinterp.F',
	    'pgas2d_dual.F',
	    'pgas2d.F',
	    'ppm_de.F',
	    'PPML_Conservative.F',
	    'PPML_HLLD.F',
	    'PPML_MAIN.F',
	    'PPML_monot.F',
	    'PPML_potokx.F',
	    'PPML_potoky.F',
	    'PPML_potokz.F',
	    'PPML_Primitive.F',
	    'PPML_sub.F',
	    'PPML_TimeStep.F',
	    'tscint1d.F',
	    'tscint2d.F',
	    'tscint3d.F',
	    'twoshock.F',
	    'xeuler_sweep.F',
	    'yeuler_sweep.F',
	    'zeuler_sweep.F']


charm_main = []
includes.append(['enzo.decl.h','enzo.def.h'])
charm_main = ['../Cello/main_enzo.cpp']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries])

#------------------------------
# TARGETS
#------------------------------

libraries   = env.Library ('enzo', sources)

test_enzo_p = env.Program (['enzo-p.cpp', charm_main])

test_enzo_prolong = env.Program (['test_Prolong.cpp', charm_main])

binaries = [test_enzo_p, test_enzo_prolong]

env.CharmBuilder(['enzo.decl.h','enzo.def.h'],'enzo.ci',ARG = 'enzo')
# env.CharmBuilder(['main_enzo.decl.h','main_enzo.def.h'],
# 	'main_enzo.ci',ARG = 'main_enzo')

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-bin',env.Install (bin_path,binaries))
env.Alias('install-bin',env.Install ('#/bin/',binaries))

env.Alias('install-inc',env.Install (inc_path,includes))
env.Alias('install-lib',env.Install (lib_path,libraries))



