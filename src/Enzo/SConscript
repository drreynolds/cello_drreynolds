SConscript('ppm/SConscript')
SConscript('ppml/SConscript')

#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('type')
Import('use_papi')

#------------------------------
# DEPENDENCIES
#------------------------------

components = ['disk','enzo-ppm', 'enzo-ppml', 'field', 'error','memory', 'simulation', 'parallel', 'mesh', 'performance', 'monitor', 'method', 'parameters', 'cello']

if (use_papi):
	components = components + ['papi','pfm']

components = components + ['hdf5']

libraries  = ['png', '$FORTRANLIBS']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries])

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('enzo*hpp')]
sources  = [Glob('enzo_*cpp')]

#------------------------------
# TARGETS
#------------------------------

libraries     = env.Library ('enzo', sources)
test_enzo_p   = env.Program (['enzo-p.cpp', sources])

binaries = [test_enzo_p]

if (type == "charm"):

	env.CharmBuilder('enzo.decl.h','enzo.ci',ARG = 'enzo')
	env.Depends(env.Object('enzo-p.cpp'),'enzo.decl.h')

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-inc',env.Install ('#/include',includes))
env.Alias('install-lib',env.Install ('#/lib',    libraries))
env.Alias('install-bin',env.Install ('#/bin',    binaries))
env.Alias('install-bin',env.Install ('#/bin-'+type,binaries))



