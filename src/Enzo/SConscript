SConscript('ppm/SConscript')
SConscript('ppml/SConscript')

#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('parallel_type')

#------------------------------
# DEPENDENCIES
#------------------------------

components = ['user', 'enzo-ppm', 'data', 'field', 'error','parallel', 'monitor', 'parameters', 'memory', 'cello']
libraries  = ['png', '$FORTRANLIBS']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries])

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('enzo*hpp'), Glob('*.h')]
sources  = [Glob('enzo*cpp')]

#------------------------------
# TARGETS
#------------------------------

libraries     = env.Library ('enzo', sources)
test_enzo_ppm = env.Program (['test_MethodEnzoPpm.cpp', sources])

tests = [test_enzo_ppm]

if ("charm" in parallel_type):
	test = 'test_MethodEnzoPpm'
	env.CharmBuilder(test + '.decl.h',test + '.ci',ARG = test)
	env.Depends(env.Object(test + '.cpp'),test + '.decl.h')

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-inc',env.Install ('#/include',includes))
env.Alias('install-lib',env.Install ('#/lib',    libraries))
env.Alias('install-bin',env.Install ('#/bin',    tests))



