// See LICENSE_CELLO file for license and copyright information

/// @file     enzo.ci
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     2011-03-24
/// @brief    CHARM++ Enzo process group

module enzo {

  readonly int  EnzoBlock::BoundaryRank;
  readonly int  EnzoBlock::BoundaryDimension[MAX_DIMENSION];
  readonly int  EnzoBlock::BoundaryFieldType[MAX_NUMBER_OF_BARYON_FIELDS];
  //  readonly bc_enum *BoundaryType[MAX_NUMBER_OF_BARYON_FIELDS][MAX_DIMENSION][2];
  // readonly enzo_float 
  //   *EnzoBlock::BoundaryValue[MAX_NUMBER_OF_BARYON_FIELDS][MAX_DIMENSION][2]; 
  readonly int EnzoBlock::ComovingCoordinates;
  readonly int EnzoBlock::UseMinimumPressureSupport;
  readonly enzo_float EnzoBlock::MinimumPressureSupportParameter;
  readonly enzo_float EnzoBlock::ComovingBoxSize;
  readonly enzo_float EnzoBlock::HubbleConstantNow;
  readonly enzo_float EnzoBlock::OmegaMatterNow;
  readonly enzo_float EnzoBlock::OmegaLambdaNow;
  readonly enzo_float EnzoBlock::MaxExpansionRate;
  readonly int EnzoBlock::MultiSpecies;
  readonly int EnzoBlock::GravityOn;
  readonly int EnzoBlock::PressureFree;
  readonly enzo_float EnzoBlock::Gamma;
  readonly enzo_float EnzoBlock::GravitationalConstant;
  readonly int EnzoBlock::ProblemType;
  readonly int EnzoBlock::PPMFlatteningParameter;
  readonly int EnzoBlock::PPMDiffusionParameter;
  readonly int EnzoBlock::PPMSteepeningParameter;
  readonly int EnzoBlock::DualEnergyFormalism;
  readonly enzo_float EnzoBlock::DualEnergyFormalismEta1;
  readonly enzo_float EnzoBlock::DualEnergyFormalismEta2;
  readonly enzo_float EnzoBlock::pressure_floor;
  readonly enzo_float EnzoBlock::density_floor;
  readonly enzo_float EnzoBlock::number_density_floor;
  readonly enzo_float EnzoBlock::temperature_floor;
  readonly enzo_float EnzoBlock::CourantSafetyNumber;
  readonly enzo_float EnzoBlock::InitialRedshift;
  readonly enzo_float EnzoBlock::InitialTimeInCodeUnits;
  readonly enzo_float EnzoBlock::DomainLeftEdge [MAX_DIMENSION];
  readonly enzo_float EnzoBlock::DomainRightEdge[MAX_DIMENSION];
  readonly int EnzoBlock::GridRank;
  readonly int EnzoBlock::ghost_depth[MAX_DIMENSION];
  readonly int EnzoBlock::NumberOfBaryonFields;      // active baryon fields

  PUPable EnzoBoundary;
  PUPable EnzoConfig;
  PUPable EnzoFactory;

  PUPable EnzoInitialImplosion2;
  PUPable EnzoInitialSedovArray2;
  PUPable EnzoInitialSedovArray3;
//  PUPable EnzoInitialGrackleTest;
  PUPable EnzoInitialTurbulence;

  PUPable EnzoRefineShock;

  PUPable EnzoComputePressure;
  PUPable EnzoComputeTemperature;

  PUPable EnzoMethodHeat;
  PUPable EnzoMethodNull;
  PUPable EnzoMethodPpm;
  PUPable EnzoMethodPpml;
  PUPable EnzoMethodPpm3;
//  PUPable EnzoMethodGrackle;
  PUPable EnzoMethodTurbulence;
  PUPable EnzoMethodGravityCg;
  PUPable EnzoMethodGravityBiCGStab;

  PUPable EnzoProblem;
  PUPable EnzoProlong;
  PUPable EnzoProlongMC1;

  PUPable EnzoRestrict;

  extern module mesh;

  group [migratable] EnzoSimulationCharm : SimulationCharm {
    entry EnzoSimulationCharm // [ESC0]
      (const char filename[n], int n);

  }

  array[Index] EnzoBlock : CommBlock {

    entry EnzoBlock // [EB0]
      (Index index,
       int nx, int ny, int nz,	
       int num_field_blocks,
       int count_adapt,
       int cycle, double time, double dt,
       int n, char arr[n], int op_array,
       int num_face_level, int face_level[num_face_level],
       bool testing);     

    entry EnzoBlock();

    // EnzoMethodTurbulence synchronization entry methods
    entry void p_method_turbulence_end(CkReductionMsg *msg);

    // EnzoMethodGravityCg synchronization entry methods
    template <class T>
    entry void r_cg_loop_1(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_2(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_3(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_4(CkReductionMsg *msg);

  };

  array[Index] EnzoArrayMethodGravityCg {
    entry EnzoArrayMethodGravityCg();
    template <class T>
    entry void r_cg_loop_1(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_2(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_3(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_4(CkReductionMsg *msg);
  }

};

module template_defs {
   extern module enzo;

   extern entry void EnzoBlock r_cg_loop_1<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_1<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_1<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_cg_loop_2<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_2<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_2<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_cg_loop_3<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_3<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_3<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_cg_loop_4<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_4<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_4<long double>(CkReductionMsg *msg);
   
};
