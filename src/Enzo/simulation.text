----------------------------------------------------------------------

Simulation::Simulation()

   initialize()
   run()

----------------------------------------------------------------------

Simulation::run()

   Block::p_initial()

----------------------------------------------------------------------

Block::p_initial()
   allocate field_block
   Initial::compute(this)
   initialize() [Enzo variables]
   prepare()

----------------------------------------------------------------------

Block::prepare()
   Timestep::compute(this)
   Stopping::complete()
   Main::p_prepare()

----------------------------------------------------------------------

Main::p_prepare()
   [NP -> 1]
   timestep reduce
   stopping reduce
   output_open() [incomplete]
   Simulation::p_refresh() [boundary,refresh]

----------------------------------------------------------------------

Simulation::p_refresh()
   Monitor::print()
   if (stopping) Main::p_exit()
   Block::p_refresh()

----------------------------------------------------------------------

Block::p_refresh()

   Boundary::enforce()

   Block::p_refresh_face() 

----------------------------------------------------------------------

Block::p_refresh_face()
   [ K -> 1 ]

======================================================================

Main::output_open()

   open file
   Simulation::p_output_open()
    
Simulation::p_output_open()

   open file [P==0]
   create empty images
   Block.p_output() [P's with Patch]

Block::p_output()

   contribute to output image
   Main::p_output_close(# blocks) 
     [ prefer Simulation::p_output_reduce(# local blocks) ]

Main::p_output_call_reduce()

   [ NB -> 1 ]
   [ overkill reduction--prefer Simulation ]
   Simulation::p_output_reduce()

Simulation::p_output_reduce()

   Main::p_output_reduce(Main)

Main::p_output_reduce

   Add incoming proc image to main image
   [ NP -> 1]
   write file
   close file
   output_next()

Main::output_next()

   increment output counter

======================================================================
   
                   Main  Simulation Block
----------------------------------------------------------------------
(*) m2s p_call()     M   >   S               call and continue
(*) s2b p_call()             S   >   B       call and continue
(*) b2m p_call(NB)   M   <       <   B       call and count to NB
(*) s2m p_call(NP)   M   <   S               call and count to NP
(?) b2s p_call(NLB)          S   <   B       (call and count to NLB)
(X) m2b              M   >       >   B        
