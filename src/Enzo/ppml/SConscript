#------------------------------
# DIRECTORIES
#------------------------------
#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('parallel_type')
Import('use_papi')
Import('use_hdf5')

#------------------------------
# DEPENDENCIES
#------------------------------

components = ['enzo','method','mesh','field','error','disk','memory','parallel','parameters','monitor','cello']

if (use_papi):
	components = components + ['papi','pfm']
if (use_hdf5):
	components = components + ['hdf5']

libraries  = ['png', '$FORTRANLIBS']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS = [components,libraries])

#------------------------------
# SOURCE
#------------------------------

sources = [
        Glob('Cosmology*cpp'),
        Glob('Grid_*cpp'),
        Glob('initialize_*cpp'),
	'../image_dump.cpp',
        '../initialize_hydro.cpp',
	'../SetExternalBoundary.cpp',
	'../CosmologyComputeExpansionFactor.cpp',
	'../CosmologyComputeExpansionTimestep.cpp',
	'PPML_Conservative.F',
	'PPML_HLLD.F',
	'PPML_MAIN.F',
	'PPML_monot.F',
	'PPML_potokx.F',
	'PPML_potoky.F',
	'PPML_potokz.F',
	'PPML_Primitive.F',
	'PPML_sub.F',
	'PPML_TimeStep.F']

#------------------------------
# TARGETS
#------------------------------

libraries = env.Library ('enzo-ppml', sources)
binaries  = [env.Program (['test_ppml.cpp',      sources])]

if (parallel_type == "charm"):
	test = 'test_ppml'
	env.CharmBuilder(test + '.decl.h',test + '.ci',ARG = test)
	env.Depends(env.Object(test + '.cpp'),test + '.decl.h')

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-lib',env.Install ('#/lib',    libraries))
env.Alias('install-bin',env.Install ('#/bin',    binaries))
env.Alias('install-bin',env.Install ('#/bin-'+parallel_type,binaries))









