e------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('type')
Import('use_papi')

Import('bin_path')
Import('inc_path')
Import('lib_path')

#------------------------------
# DEPENDENCIES
#------------------------------

# (uses Mesh for test_FieldBlock, which requires DataBlock)

if (type == 'charm'):
   components = ['simulation','method',
		 'mesh','field','io',
		 'parallel','disk',
		 'parameters', 
		 'memory','error', 'monitor','performance',
		 'test','cello']
else:
   components = ['simulation','method',
		 'field','mesh','io',
		 'parallel','disk',
		 'parameters', 
		 'memory','error', 'monitor','performance',
		 'test','cello']

if (use_papi):
	components = components + ['papi','pfm']

libraries  = ['png','hdf5']

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('field*hpp')]
sources  = [Glob('field*cpp')]

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries])

#------------------------------
# TARGETS
#------------------------------

libraries = env.Library ('field', [sources])

charm_main = []
if (type == "charm"):
	charm_main = ["../Main/main_simulation.cpp"]

test_field_block = env.Program (['test_FieldBlock.cpp',  charm_main])
test_field_descr = env.Program (['test_FieldDescr.cpp',  charm_main])
test_field_face  = env.Program (['test_FieldFace.cpp',  charm_main])
test_it_field    = env.Program (['test_ItField.cpp',  charm_main])

binaries = [test_field_block, test_field_descr, test_field_face, test_it_field]

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-bin',env.Install (bin_path,binaries))
env.Alias('install-inc',env.Install (inc_path,includes))
env.Alias('install-lib',env.Install (lib_path,libraries))




