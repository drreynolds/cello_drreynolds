#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('type')

#------------------------------
# DEPENDENCIES
#------------------------------

# (uses Mesh for test_FieldBlock, which requires DataBlock)

components = ['mesh','cello','error']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=components)

#------------------------------
# SOURCE
#------------------------------

includes = [Glob('field*hpp')]
sources  = [Glob('field*cpp')]

#------------------------------
# TARGETS
#------------------------------

libraries        = env.Library ('field', [sources])

test_field_block = env.Program (['test_FieldBlock.cpp',  sources])
test_field_descr = env.Program (['test_FieldDescr.cpp',  sources])
test_field_face  = env.Program (['test_FieldFace.cpp',  sources])

if (type == "charm"):
   env.Depends('test_FieldBlock.o', '../Test/test.decl.h')
   env.Depends('test_FieldDescr.o', '../Test/test.decl.h')
   env.Depends('test_FieldFace.o',  '../Test/test.decl.h')

binaries = [test_field_block, test_field_descr, test_field_face]

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-inc',env.Install ('#/include',includes))
env.Alias('install-lib',env.Install ('#/lib',    libraries))
env.Alias('install-bin',env.Install ('#/bin',    binaries))
env.Alias('install-bin',env.Install ('#/bin-'+type,binaries))




