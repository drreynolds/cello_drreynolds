#------------------------------
# DIRECTORIES
#------------------------------

#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('type')

Import('bin_path')
Import('inc_path')
Import('lib_path')

Import('use_papi')

#------------------------------
# DEPENDENCIES
#------------------------------

# Direct Dependencies
# disk -> error

# error -> monitor

# field -> error
# field -> mesh [LOOP]

# io -> error
# io -> field

# memory -> error

# mesh  -> disk
# mesh -> field [LOOP]
# mesh -> io
# mesh -> parallel
# mesh -> simulation (CHARM)

# monitor -> utilities

# parallel -> error

# parameters -> error

# performance -> error

# test_* -> test

if (use_papi):
   libs_papi = ['papi','pfm']
else:
   libs_papi = []

print libs_papi
libs_external    = ['external']
libs_performance = ['performance', 'error', 'monitor', 'utilities'] + libs_papi
libs_error       = ['error', 'monitor', 'utilities']
libs_monitor     = ['parallel', 'error', 'monitor', 'utilities']
libs_disk        = ['disk'] +    libs_error +  ['hdf5']
libs_parallel    = ['parallel'] +libs_error
libs_field       = ['field', 'mesh', 'io'] + libs_parallel + ['cello']
libs_io          = ['io'] +      libs_error
libs_main        = ['main']
libs_memory      = ['memory'] +   libs_error
libs_mesh        = ['mesh','field','io','disk'] + libs_parallel + libs_external + ['cello','png','hdf5']
libs_method      = ['method']
libs_parallel    = ['parallel'] + libs_error
libs_parameters  = ['parameters'] + libs_error +  ['cello']
# 
#components_performance = ['memory','error','monitor', 'test','cello']

libs_simulation = ['simulation']
#,'method','mesh','field','memory',
#                         'parallel','parameters','error','monitor',
#                         'performance','cello']
libs_test = ['test']

# FIX CIRCULAR DEPENDENCE BETWEEN MESH FIELD SIMULATION with CHARM
if (type=='charm'):
   libs_field  = ['simulation','method','mesh','field','io','parallel','disk','parameters','memory','error','monitor','performance','cello','external', 'png', 'hdf5']
   libs_io     = ['io','simulation','method','mesh','field','disk','memory','parallel','parameters','test','cello','external','error','monitor','performance','png','hdf5']
   libs_mesh   = ['field','simulation','method','io','disk','memory','parallel','parameters','error','monitor','performance','test','cello','external','png','hdf5']




# libraries_cello  = ['png','$FORTRANLIBS','m']

# libraries_field  = ['png','hdf5']
# libraries_io  = ['png','hdf5']
#libraries_method  = []
#libraries_performance = []
#libraries_simulation = ['$FORTRANLIBS']
#libraries_test = []


#------------------------------
# SOURCE
#------------------------------

includes_cello =       [Glob('cello*hpp')]
includes_disk =        [Glob('disk*hpp')]
includes_error =       [Glob('error*hpp')]
includes_field =       [Glob('field*hpp')]
includes_io =          [Glob('io*hpp')]
includes_main =        ['main.hpp']
includes_memory =      [Glob('memory*hpp')]
includes_mesh =        [Glob('mesh*hpp')]
includes_method =      [Glob('method*hpp')]
includes_monitor =     [Glob('monitor*hpp')]
includes_parallel =    [Glob('parallel*hpp'),'parallel.def']
includes_parameters =  [Glob('parameters*hpp'),'parse.h']
includes_performance = [Glob('performance*hpp')]
includes_simulation =  [Glob('simulation*hpp')]
includes_utilities = [Glob('utilities*hpp')]
includes_test =        [Glob('test_Unit*hpp'),'test.hpp']

sources_cello =       [Glob('cello*cpp')]
sources_disk =        [Glob('disk*cpp')]
sources_error =       [Glob('error*cpp')]
sources_field =       [Glob('field*cpp')]
sources_io =          [Glob('io*cpp')]
sources_main =        [Glob('main*cpp')]
sources_memory =      [Glob('memory*cpp')]
sources_mesh =        [Glob('mesh*cpp')]
sources_method =      [Glob('method*cpp')]
sources_monitor =     [Glob('monitor*cpp')]
sources_parallel =    [Glob('parallel*cpp')]
sources_parameters =  [Glob('parameters*cpp'),'parse.tab.c','lex.yy.c']
sources_performance = [Glob('performance*cpp')]
sources_simulation =  [Glob("simulation*cpp")]
sources_utilities = [Glob('utilities*cpp')]
sources_test =        [Glob('test_Unit*cpp')]

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# WHEN parse.y or parse.l change:
# 1. Uncomment below
# 2. scons -u type=serial
# 3. cp ../../build/serial/Cello/lex.yy.c .
# 4. cp ../../build/serial/Cello/parse.tab.? .
# 5. Recomment below
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# env.CFile(target = 'lex.yy.c', source = 'parse.l')
# env.CFile(target = ['parse.tab.c', 'parse.tab.h'], source = 'parse.y', YACCFLAGS='-d -t')
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


if (type == "charm"):
   env.CharmBuilder('main_enzo.decl.h','main_enzo.ci',ARG = 'main_enzo')
   env.CharmBuilder('main_enzo.def.h', 'main_enzo.ci',ARG = 'main_enzo')
   includes_main = includes_main + ['main_enzo.decl.h','main_enzo.def.h']

   env.CharmBuilder('main.decl.h','main.ci',ARG = 'main')
   env.CharmBuilder('main.def.h', 'main.ci',ARG = 'main')
   includes_main = includes_main + ['main.decl.h','main.def.h']

   env.CharmBuilder ('main_simulation.decl.h','main_simulation.ci',
                     ARG = 'main_simulation')
   env.CharmBuilder ('main_simulation.def.h', 'main_simulation.ci',
                     ARG = 'main_simulation')
   includes_main = includes_main + [
       'main_simulation.decl.h','main_simulation.def.h']

   env.CharmBuilder('main_mesh.decl.h','main_mesh.ci',ARG = 'main_mesh')
   env.CharmBuilder('main_mesh.def.h', 'main_mesh.ci',ARG = 'main_mesh')
   includes_main = includes_main + ['main_mesh.decl.h','main_mesh.def.h']

   env.CharmBuilder('mesh.decl.h','mesh.ci',ARG = 'mesh')
   env.CharmBuilder('mesh.def.h', 'mesh.ci',ARG = 'mesh')
   includes_mesh = includes_mesh + ['mesh.decl.h','mesh.def.h']

   env.CharmBuilder('simulation.decl.h','simulation.ci',ARG='simulation')
   env.CharmBuilder('simulation.def.h', 'simulation.ci',ARG='simulation')
   includes_simulation = includes_simulation + ['simulation.decl.h','simulation.def.h'];

#------------------------------
# ENVIRONMENTS
#------------------------------

# env_cello  = env.Clone(LIBS=[components_cello, libraries_cello])
# env_disk   = env.Clone(LIBS=[components_disk,  libraries_disk])
# env_error  = env.Clone(LIBS=[components_error, libraries_error])
#env_field  = env.Clone(LIBS=[components_field, libraries_field])
#env_io     = env.Clone(LIBS=[components_io,    libraries_io])
#env_main   = env.Clone(LIBS=[components_main])
#env_memory = env.Clone(LIBS=[components_memory,libraries_memory])
#env_mesh   = env.Clone(LIBS=[components_mesh,libraries_mesh])
#env_method = env.Clone(LIBS=[components_method,libraries_method])
#env_monitor = env.Clone(LIBS=[components_monitor])
#env_parallel = env.Clone(LIBS=[components_parallel])
#env_parameters = env.Clone(LIBS=[components_parameters])
#env_performance = env.Clone(LIBS=[components_performance,libraries_performance])
#env_simulation = env.Clone(LIBS=[components_simulation,libraries_simulation])
#env_test = env.Clone(LIBS=[components_test,libraries_test])

#------------------------------
# TARGETS
#------------------------------


if (type == "charm"):
   sources_disk = sources_disk + ['main.cpp']
   sources_error = sources_error + ['main.cpp']
   sources_field = sources_field + ['main_simulation.cpp']
   sources_io     = sources_io     + ['main_simulation.cpp']
   sources_memory = sources_memory + ["main.cpp"]
   sources_mesh   = sources_mesh   + ['main_mesh.cpp']
   sources_monitor = sources_monitor + ["main.cpp"]
   sources_parameters = sources_parameters + ["main.cpp"]
   sources_performance = sources_performance + ["main.cpp"]

test_FileHdf5     = env.Program ('test_FileHdf5.cpp',   LIBS=[libs_disk,  'test'])
test_FileIfrit    = env.Program ('test_FileIfrit.cpp',  LIBS=[libs_disk,  'test'])
test_error        = env.Program ('test_Error.cpp',      LIBS=[libs_error, 'test'])

# FIX CIRCULAR DEPENDENCE BETWEEN MESH FIELD SIMULATION with CHARM++
if (type == 'charm'):
   test_field_block  = env.Program (['test_FieldBlock.cpp', sources_field],LIBS=[libs_field, 'test'])
   test_field_descr  = env.Program (['test_FieldDescr.cpp', sources_field], LIBS=[libs_field, 'test'])
   test_field_face   = env.Program (['test_FieldFace.cpp', sources_field],  LIBS=[libs_field, 'test'])
   test_it_field     = env.Program (['test_ItField.cpp', sources_field],    LIBS=[libs_field, 'test'])
   test_it_reduce    = env.Program (['test_ItReduce.cpp', sources_io],   LIBS=[libs_io,     'test']) 
   test_it_node      = env.Program (['test_ItNode.cpp', sources_mesh],  LIBS=[libs_mesh,     'test'])
   test_block        = env.Program (['test_Block.cpp', sources_mesh],    LIBS=[libs_mesh,   'test'])
   test_hierarchy    = env.Program (['test_Hierarchy.cpp',sources_mesh],  LIBS=[libs_mesh,   'test'])
   test_patch        = env.Program (['test_Patch.cpp',sources_mesh],      LIBS=[libs_mesh,   'test'])
   test_tree         = env.Program (['test_Tree.cpp',sources_mesh],       LIBS=[libs_mesh,   'test'])
   test_tree_density = env.Program (['test_TreeDensity.cpp',sources_mesh],LIBS=[libs_mesh,   'test'])
   test_node         = env.Program (['test_Node.cpp',sources_mesh],       LIBS=[libs_mesh,   'test'])
   test_node_trace   = env.Program (['test_NodeTrace.cpp',sources_mesh],  LIBS=[libs_mesh,   'test'])
else:
   test_field_block  = env.Program ('test_FieldBlock.cpp',LIBS=[libs_field, 'test'])
   test_field_descr  = env.Program ('test_FieldDescr.cpp', LIBS=[libs_field, 'test'])
   test_field_face   = env.Program ('test_FieldFace.cpp',  LIBS=[libs_field, 'test'])
   test_it_field     = env.Program ('test_ItField.cpp',    LIBS=[libs_field, 'test']) 
   test_it_reduce    = env.Program ('test_ItReduce.cpp',   LIBS=[libs_io,     'test'])
   test_it_node      = env.Program ('test_ItNode.cpp',   LIBS=[libs_mesh,     'test'])
   test_block        = env.Program ('test_Block.cpp',      LIBS=[libs_mesh,   'test'])
   test_hierarchy    = env.Program ('test_Hierarchy.cpp',  LIBS=[libs_mesh,   'test'])
   test_patch        = env.Program ('test_Patch.cpp',      LIBS=[libs_mesh,   'test'])
   test_tree         = env.Program ('test_Tree.cpp',       LIBS=[libs_mesh,   'test'])
   test_tree_density = env.Program ('test_TreeDensity.cpp',LIBS=[libs_mesh,   'test'])
   test_node         = env.Program ('test_Node.cpp',       LIBS=[libs_mesh,   'test'])
   test_node_trace   = env.Program ('test_NodeTrace.cpp',  LIBS=[libs_mesh,   'test'])


test_memory       = env.Program ('test_Memory.cpp',     LIBS=[libs_memory, 'test'])
test_monitor      = env.Program ('test_Monitor.cpp',    LIBS=[libs_monitor,'test','parallel','error'])
#--------------------------------------------------
test_group_process = env.Program ('test_GroupProcess.cpp', LIBS=[libs_parallel,'test'])
test_layout       = env.Program ('test_Layout.cpp',       LIBS=[libs_parallel,'test'])
if (type == "mpi"):
   test_mpi       = env.Program ('test_Mpi.cpp',          LIBS=[libs_parallel,'test'])

test_parameters   = env.Program ('test_Parameters.cpp',  LIBS=[libs_parameters,'test','parallel'])
test_parse        = env.Program ('test_Parse.cpp',       LIBS=[libs_parameters,'test'])

test_performance = env.Program('test_Performance.cpp',   LIBS=[libs_performance,'test'])
test_papi        = env.Program('test_Papi.cpp',          LIBS=[libs_performance,'test'])


libraries_disk   = env.Library ('disk',   sources_disk)
libraries_error  = env.Library ('error',  sources_error)
libraries_field  = env.Library ('field',  sources_field)
libraries_io     = env.Library ('io',     sources_io)
libraries_main   = env.Library ('main',   sources_main)
libraries_memory = env.Library ('memory', sources_memory)
libraries_mesh   = env.Library ('mesh',   sources_mesh)
libraries_method = env.Library ('method', sources_method)
libraries_monitor = env.Library ('monitor', sources_monitor)
libraries_parallel = env.Library ('parallel', sources_parallel)
libraries_parameters = env.Library ('parameters', sources_parameters)
libraries_performance = env.Library ('performance', sources_performance)
libraries_simulation = env.Library ('simulation', sources_simulation)
libraries_utilities = env.Library ('utilities', sources_utilities)
libraries_test  = env.Library ('test', sources_test)



binaries_disk  = [test_FileHdf5,
                  test_FileIfrit]
binaries_error = [test_error]
binaries_field = [test_field_block,
                  test_field_descr,
                  test_field_face,
                  test_it_field]

binaries_io    = [test_it_reduce]
binaries_memory  = [test_memory]
binaries_mesh = [ test_block,test_hierarchy,test_patch,test_tree,test_tree_density,test_node,test_node_trace,test_it_node]
binaries_monitor = [test_monitor]
binaries_parallel = [test_group_process,test_layout]
if (type == "mpi"):
	binaries_parallel.append(test_mpi)
elif (type == "charm"):
	sources_parallel = sources_parallel + ["main.cpp"]
binaries_parameters = [test_parameters, test_parse]
binaries_performance = [test_performance,test_papi]
#--------------------------------------------------

#------------------------------
# INSTALL
#------------------------------

lib_cello = env.Library ('cello', sources_cello)
lib_disk  = env.Library ('disk',  sources_disk)

env.Alias('install-inc',env.Install (inc_path,includes_cello))
env.Alias('install-lib',env.Install (lib_path,lib_cello))

env.Alias('install-bin',env.Install (bin_path,binaries_disk))
env.Alias('install-inc',env.Install (inc_path,includes_disk))
env.Alias('install-lib',env.Install (lib_path,lib_disk))

env.Alias('install-bin',env.Install (bin_path,binaries_error))
env.Alias('install-inc',env.Install (inc_path,includes_error))
env.Alias('install-lib',env.Install (lib_path,libraries_error))

env.Alias('install-bin',env.Install (bin_path,binaries_field))
env.Alias('install-inc',env.Install (inc_path,includes_field))
env.Alias('install-lib',env.Install (lib_path,libraries_field))

env.Alias('install-bin',env.Install (bin_path,binaries_io))
env.Alias('install-inc',env.Install (inc_path,includes_io))
env.Alias('install-lib',env.Install (lib_path,libraries_io))

env.Alias('install-inc',env.Install (inc_path,includes_main))
env.Alias('install-lib',env.Install (lib_path,libraries_main))

env.Alias('install-bin',env.Install (bin_path,binaries_memory))
env.Alias('install-inc',env.Install (inc_path,includes_memory))
env.Alias('install-lib',env.Install (lib_path,libraries_memory))

env.Alias('install-bin',env.Install (bin_path,binaries_mesh))
env.Alias('install-inc',env.Install (inc_path,includes_mesh))
env.Alias('install-lib',env.Install (lib_path,libraries_mesh))

# --------------------------------------------------

env.Alias('install-inc',env.Install (inc_path,includes_method))
env.Alias('install-lib',env.Install (lib_path,libraries_method))

env.Alias('install-bin',env.Install (bin_path,binaries_monitor))
env.Alias('install-inc',env.Install (inc_path,includes_monitor))
env.Alias('install-lib',env.Install (lib_path,libraries_monitor))

env.Alias('install-bin',env.Install (bin_path,binaries_parallel))
env.Alias('install-inc',env.Install (inc_path,includes_parallel))
env.Alias('install-lib',env.Install (lib_path,libraries_parallel))

env.Alias('install-bin',env.Install (bin_path,binaries_parameters))
env.Alias('install-inc',env.Install (inc_path,includes_parameters))
env.Alias('install-lib',env.Install (lib_path,libraries_parameters))


env.Alias('install-bin',env.Install (bin_path,binaries_performance))
env.Alias('install-inc',env.Install (inc_path,includes_performance))
env.Alias('install-lib',env.Install (lib_path,libraries_performance))

env.Alias('install-inc',env.Install (inc_path,includes_utilities))
env.Alias('install-lib',env.Install (lib_path,libraries_utilities))


env.Alias('install-inc',env.Install (inc_path,includes_simulation))
env.Alias('install-lib',env.Install (lib_path,libraries_simulation))

env.Alias('install-inc',env.Install (inc_path,includes_test))
env.Alias('install-lib',env.Install (lib_path,libraries_test))
