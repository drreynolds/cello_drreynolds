* Entry Methods
** TODO Entry Method List [0/35]
*** TODO Main::Main (CkArgMsg *m);
    Main entry method called at startup
*** TODO Main::void p_exit (int count_blocks);
    Main exit method, called in SimulationCharm::c_compute() if
    SimulationCharm::stop_ == true
*** TODO CommBlock::CommBlock 
    (Index index, int nx, int ny, int nz, int num_field_blocks, int
    count_adapt, int cycle, double time, double dt, int n, char arr[n],
    int op_array, int num_face_level, int face_level[num_face_level],
    bool testing);
    

    Main CommBlock constructor.  CommBlocks are part of an array
    Hierarchy::block_array_.  The array is stored on the root-process
    Simulation::hierarchy_ object.  The initial array of CommBlocks are
    created in EnzoFactory::create_block_array(), and subsequent
    refined CommBlocks are inserted in EnzoFactory::create_block()

*** TODO void CommBlock::p_write (int index_output);

    Output entry method for initiating writing CommBlock data to disk.
    Called in Output::write_hierarchy_(), and calls
    Output::write_block() for the specified index_output in the
    Simulation.  Calls SimulationCharm::s_write() at the end to
    synchronize.

*** TODO void CommBlock::p_compute (int cycle, double time, double dt);

    Entry method for initiating computation on the CommBlocks.  Called
    by root process on Hierarchy::block_array_ in
    SimulationCharm::c_compute() if SimulationCharm::stop_ == false.
    Called on all blocks but only leaves call Method::compute_block()
    on sequence of methods.  Updates cycle and time, sets the next
    phase to phase_adapt, and calls p_refresh_begin().

*** TODO void CommBlock::p_read (int index_input);

    Initiates reading CommBlocks from data files.  INCOMPLETE

*** TODO void CommBlock::p_output (CkReductionMsg * msg);
    Initiates output phase.  Reduces mesh data for global timestep
    dt_forest and stopping criteria stop_forest, updates the simulation
    state information, and calls SimulationCharm::p_output()

*** TODO void CommBlock::p_adapt_mesh ();

    Entry method initiating mesh adaptation.  Called by q_adapt_end()
    during initial mesh creation (mesh adaptation calls the non-entry
    method adapt_mesh()).  Leaves compute the local refinement
    criteria, then all CommBlocks call a global reduction
    q_adapt_called().  This reduction was added to prevent
    p_get_neighbor_level() calls from being invoked before
    p_adapt_mesh() was called for a given CommBlock, which led to
    incorrect results.

*** TODO void CommBlock::q_adapt_called(CkReductionMsg * msg);

    Synchronization method called by p_adapt_mesh() via QD.
    Initializes q_adapt_next() QD call, then leaves notify all
    neighbors of local refinement decision
    CommBlock::notify_neighbors().

*** TODO void CommBlock::p_get_neighbor_level
    (Index index,int ic3[3], int if3[3], int level_now, int level_new);

    Called by CommBlock::notify_neighbors() to notify adjacent
    CommBlock leaves of intended level.  May be called "recursively"
    (via CommBlock::notify_neighbors()) if level must be adjusted to
    maintain 2-1 refinement level constraint.
*** TODO void CommBlock::p_child_can_coarsen ();
    Called by leaves in q_adapt_next() that can coarsen to notify
    parent CommBlock.  Since all level decisions are made before
    q_adapt_next(), it is guaranteed that if any child CommBlock calls
    p_child_can_coarsen() on its parent, then all will.  sync_coarsen_
    is used to count children, and begin the coarsening procedure via
    p_parent_can_coarsen() on all children after all children have
    checked in.

*** TODO void CommBlock::p_parent_can_coarsen ();
    Called by parent after all siblings have checked in with the parent
    notifying it that it can and is ready to coarsen.  If the level > 0
    and is_leaf() (which should always be true), then copy block data
    to the parent via p_get_child_data().
*** TODO void CommBlock::p_get_child_data
    (int ic3[3], int na, char arr[na], int nf, int
    child_face_level[nf]);

    Called by children to copy their data during a local coarsening
    procedure.  Copies data from the argument to the CommBlock's
    FieldBlock, then indicates that the child can be deleted via
    delete_child_() (which may not necessarily delete the child object
    immediately).
*** TODO void CommBlock::p_delete ();
    Entry method to delete the specified child CommBlock and remove it
    from the Hierarchy::block_array_.  Syncronizes via sync_coarsen_,
    after which the children_ array is cleared.
*** TODO void CommBlock::q_adapt_next ();
    Entry method called by q_adapt_called() via QD to ensure that all
    CommBlocks have finished updating their intended mesh refinement
    levels.  When called, it finalizes the mesh levels, and refines if
    needed (by calling refine()), or coarsens if possible (by calling
    p_child_can_coarsen() on parent).  Calls q_adapt_end() via QD after
    all refinement and coarsening are complete.

*** TODO void CommBlock::q_adapt_end ();

    Called by q_adapt_next() via QD.  If CommBlock is to be deleted,
    then ckDestroy() is called.  If it is the root CommBlock (Index [0:
    0: 0:]), first call doneInserting() on the block_array_, then call
    either p_adapt_mesh() if further mesh adaptation is required
    (i.e. in the initial mesh creation phase), or call
    p_refresh_begin() to initiate refreshing ghost zones.

*** TODO void CommBlock::p_refresh_begin ();

    Called by CommBlock::q_adapt_end() (via array call) and p_compute()
    (via self chare call).  If refresh_type == "quiescence", initiates
    QD call to q_refresh_end().  Leaves communicate with each adjacent
    CommBlock to send their adjacent face CommBlock data.  This is done
    by calling (non-entry methods) refresh_coarse(), refresh_same(),
    and refresh_fine(), respectively.  Each of these call entry methods
    x_refresh_coarse(), x_refresh_same(), or x_refresh_fine().  If
    refresh_type == "counter"), then x_refresh_foo() explicitly calls
    q_refresh_end() after the Sync variable loop_refresh_ reaches the
    neighbor count.
    
*** TODO void CommBlock::q_refresh_end ();
    Depending on refresh_type == ["counter","quiescence"],
    q_refresh_end() is either called by x_refresh_[coarse|fine|same]()
    after loop_refresh_ sync counter has reached the number of
    neighbors, or though QD initialized in p_refresh_begin() Depending
    on next_phase, prepare() is called if next_phase == phase_output,
    or adapt_mesh() is called if phase_adapt.
*** TODO void CommBlock::x_refresh_same (int n, char buffer[n], int if3[3]);
    Called by neighbor in same mesh level to transfer shared face data.
    Incoming data is stored in the face data.  If refresh_type ==
    "counter" and loop_refresh_ has reached the number of neighbors,
    q_refresh_end() is called
*** TODO void CommBlock::x_refresh_fine (int n, char buffer[n], int if3[3],int ic3[3]);
    Called by neighbor in coarser mesh level to transfer shared face
    data.  Incoming data is stored in the face data.  If refresh_type
    == "counter" and loop_refresh_ has reached the number of neighbors,
    q_refresh_end() is called
*** TODO void CommBlock::x_refresh_coarse (int n, char buffer[n], int if3[3],  int ic3[3]);
    Called by neighbor in finer mesh level to transfer shared face
    data.  Incoming data is stored in the face data.  If refresh_type
    == "counter" and loop_refresh_ has reached the number of neighbors,
    q_refresh_end() is called
*** TODO void CommBlock::x_refresh_child  (int n, char buffer[n], int ic3[3]);
    In the adapt phase, x_refresh_child() is called to transfer
    CommBlock data from child to parent when a CommBlock is coarsened.
    Called by ~CommBlock().
*** TODO void CommBlock::p_print(std::string);
    Print a message for debugging
*** TODO Simulation::Simulation
    (const char filename[n], int n);

    Main Simulation constructor, which initializes monitor_ and
    parameters_
*** TODO ArrayMap::ArrayMap(int, int, int);
    Constructor for the ArrayMap Chare used for mapping CommBlock
    chares to physical processors
*** TODO SimulationCharm::SimulationCharm (const char filename[n], int n);
    Initializes a new SimulationCharm chare (currently initializes
    parent Simulation() base class and block_sync_(0)).
*** TODO void SimulationCharm::p_initialize_begin ();
    Called by Main.  Calls EnzoSimulationCharm::initialize(), which
    calls SimulationCharm::initialize(), which calls
    Simulation::initialize().  SimulationCharm::initialize() finishes
    with an empty reduction to SimulationCharm::r_initialize_forest().
    
*** TODO void SimulationCharm::r_initialize_forest ();
    This entry method calls SimulationCharm::initialize_forest_(),
    then finishes with an empty reduction to
    SimulationCharm::r_initialize_end().  Synchronization using
    r_initialize_forest() and r_initialize_end() was to prevent
    initialization of CommBlocks whose constructors had not been
    created yet.
    
*** TODO void SimulationCharm::r_initialize_end ();
    Used to add synchronization during initialization.  Root calls
    p_adapt_mesh() on block_array().
*** TODO void SimulationCharm::p_output ();
    Called by CommBlock::p_output().  Uses block_sync_ to synchronize
    so that the last CommBlock assigned to the SimulationCharm calls
    SimulationCharm::c_output().  c_output() is called as an empty
    reduction() to synchronize between output files.
*** TODO void SimulationCharm::c_output ();
    reduction called by SimulationCharm::p_output() to synchronize
    between output file sets.  Calls Problem::output_reset() and
    output_next() to initiate first output
*** TODO void SimulationCharm::s_write ();
    Called by CommBlock::p_write() Synchronizes using block_sync_ so
    that after last CommBlock calls SimulationCharm::s_write(),
    SimulationCharm::c_write() is called.  c_write is called via an
    empty reduction.
    
*** TODO void SimulationCharm::c_write ();
    Called by s_write() using an empty global reduction.  Calls
    Problem::output_wait(), which synchronizes writers and non-writers.
    output_wait() calls SimulationCharm::p_output_write() on itself for
    writers, otherwise it calls p_output_write() on assigned writer.
    If not a writer, call Output::close(), Output::finalize(), and
    output_next(). (This cleanup is performed in
    Problem::output_write() for writers after last writer, synchronized
    via Output::sync()).  Also calls Output::cleanup_remote().

*** TODO void SimulationCharm::p_output_write (int n, char buffer[n]);
    Calls Problem::output_write() using the given packed data.  Calls
    Output::update_remote(), which accumulates and writes data sent
    from remote processes.  Finishes with Output::close(),
    Output::finalize(), and output_next() if Output::sync() is done.

*** TODO void SimulationCharm::p_performance_reduce (CkReductionMsg * msg);

    Called by SimulationCharm::performance_output() via a global
    reduction to reduce global performance data.  Computes the
    reduction, and writes reduced performance data to stdout.
    
** TODO Entry Method Sequence
   >>: entry method call
   R>: reduction call
   Q>: quiescence detection call
   0>: root calls

   >: entry method definition
   R: reduction method
   Q: quiescence detection

   > Main::Main
     >> EnzoSimulationCharm::EnzoSimulationCharm()
     >> SimulationCharm::p_initialize_begin()
     
   > EnzoSimulationCharm::EnzoSimulationCharm()
        SimulationCharm::SimulationCharm()
           Simulation::Simulation()

   > SimulationCharm::p_initialize_begin()
        EnzoSimulationCharm::initialize() [V]
           SimulationCharm::initialize()
              Simulation::initialize()
           R> SimulationCharm::r_initialize_forest()
           EnzoBlock::initialize() [S]

   R SimulationCharm::r_initialize_forest()
        Simulation::initialize_forest_()
            Hierarchy::create_forest()
        allocate_array_()
                   EnzoForest::create_block_array() [V]
                     >> EnzoBlock::EnzoBlock()
      R SimulationCharm::r_initialize_end()

   R SimulationCharm::r_initialize_end()
     0> CommBlock::p_adapt_mesh()

   > CommBlock::p_adapt_mesh()
        CommBlock::desired_level_()
     R> CommBlock::q_adapt_next()

   R CommBlock::q_adapt_next()
      
        @@@@
