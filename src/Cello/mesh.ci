// See LICENSE_CELLO file for license and copyright information

/// @file     mesh.ci
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     2011-05-09
/// @brief    CHARM++ Mesh process group

module mesh {

  PUPable Config;
  PUPable Factory;
  PUPable Initial;
  PUPable InitialDefault;
  PUPable InitialFile;
  PUPable InputData;
  PUPable OutputData;
  PUPable OutputImage;
  PUPable OutputRestart;
  PUPable Problem;
  PUPable ProlongLinear;
  PUPable RestrictLinear;
  PUPable Refine;
  PUPable RefineSlope;
  PUPable RefineMass;
  PUPable ItFieldList;
  PUPable ItFieldRange;

  array[Index] CommBlock {

    entry CommBlock // [CB0]
      (Index index,
       int nx, int ny, int nz,	
       int num_field_blocks,
       int count_adapt,
       int cycle, double time, double dt,
       int  n,     char arr[n],  int op_array,
       int num_face_level, int face_level[num_face_level],
       bool testing);

    entry CommBlock();	 // [CB0]

    entry void p_write (int index_output); // [CB1]
    entry void p_compute(int cycle, double time, double dt); // [CB2]
    entry void p_read (int index_input); // [CB3]
    entry void p_output(CkReductionMsg * msg); // [CB4]

    // @@@@@@@@@@@@@@@@@@@@ NEW ADAPT @@@@@@@@@@@@@@@@@@@@


    entry void p_adapt_mesh(); // [CB5]
    entry void q_adapt_called(CkReductionMsg * msg); // [CB6]

    entry void p_get_neighbor_level(Index index,int ic3[3], int if3[3], // [CB7]
				    int level_now, int level_new);
    entry void p_child_can_coarsen(); // [CB8]
    entry void p_parent_can_coarsen(); // [CB9]
    entry void p_get_child_data(int ic3[3], // [CB10]
				int na, char arr[na],
				int nf, int child_face_level[nf]);
    entry void p_delete(); // [CB11]

    entry void q_adapt_next(); // [CB12]
    entry void q_adapt_end(); // [CB13]

    // refresh

    entry void p_refresh_begin(); // [CB14]
    entry void q_refresh_end(); // [CB15]
    entry void x_refresh(int n, char buffer[n],  char rtype, 
			 int iface[3], int ichild[3]); // [CB21]
    entry void x_refresh_same(int n, char buffer[n], int iface[3]); // [CB16]
    entry void x_refresh_fine(int n, char buffer[n], // [CB17]
			      int iface[3],int ichild[3]);
    entry void x_refresh_coarse(int n, char buffer[n], // [CB18]
				int iface[3],
				int ichild[3]);
    entry void x_refresh_child(int n, char buffer[n], // [CB19]
			       int ichild[3]);

    entry void p_print(std::string); // [CB20]
  };
}

