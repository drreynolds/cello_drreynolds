// See LICENSE_CELLO file for license and copyright information

/// @file     mesh.ci
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     2011-05-09
/// @brief    CHARM++ Mesh process group

module mesh {

  PUPable Config;
  PUPable Factory;
  PUPable Initial;
  PUPable InitialDefault;
  PUPable InitialFile;
  PUPable InputData;
  PUPable OutputData;
  PUPable OutputImage;
  PUPable OutputRestart;
  PUPable Problem;
  PUPable ProlongLinear;
  PUPable RestrictLinear;
  PUPable Refine;
  PUPable RefineSlope;
  PUPable RefineMass;
  PUPable ItFieldList;
  PUPable ItFieldRange;

  array[Index] CommBlock {

    entry CommBlock
      (Index index,
       int nx, int ny, int nz,	
       int num_field_blocks,
       int count_adapt,
       bool initial,
        int cycle, double time, double dt,
       int  n,     char arr[n],  int op_array,
       bool testing);

    entry CommBlock();	

    entry void p_write (int index_output);
    entry void p_compute(int cycle, double time, double dt);
    entry void p_read (int index_input);
    entry void p_output(CkReductionMsg * msg);

    // adapt

    entry void p_adapt_begin ();
    entry void q_adapt_end();
    entry void p_adapt_start (int count_adapt);
    entry void q_adapt_stop();
    entry void p_refine ();
    entry void p_balance (int v3[3]);
    entry void p_set_neighbor(const int v3[3]);
    entry void p_delete_neighbor(const int v3[3]);
    entry void p_set_nibling(const int v3[3]);
    entry void p_delete_nibling(const int v3[3]);
    entry void p_child_can_coarsen(int icx,int icy,int icz,
				   int n, char arr[n]);

    // refresh

    entry void p_refresh_begin();
    entry void q_refresh_end();
    entry void x_refresh_same(int n, char buffer[n], 
                              int ifx, int ify, int ifz);
    entry void x_refresh_fine(int n, char buffer[n],
			      int ifx, int ify, int ifz,
			      int icx, int icy, int icz);
    entry void x_refresh_coarse(int n, char buffer[n],
			      int ifx, int ify, int ifz,
			      int icx, int icy, int icz);
    entry void x_refresh_child(int n, char buffer[n],
			       int icx, int icy, int icz);

    entry void p_print(std::string);
  };
}

