// See LICENSE_CELLO file for license and copyright information

/// @file     mesh.ci
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     2011-05-09
/// @brief    CHARM++ Mesh process group

module mesh {

  PUPable BoundaryPeriodic;
  PUPable BoundaryValue;
  PUPable Config;
  PUPable ColormapRGB;
  PUPable Factory;
  PUPable Initial;
  PUPable InitialFile;
  PUPable InitialValue;
  PUPable InputData;
  PUPable ItFieldList;
  PUPable ItFieldRange;
  PUPable MaskPng;
  PUPable MaskExpr;
  PUPable OutputCheckpoint;
  PUPable OutputData;
  PUPable OutputImage;
  PUPable Problem;
  PUPable ProlongLinear;
  PUPable Refine;
  PUPable RefineMask;
  PUPable RefineMass;
  PUPable RefineSlope;
  PUPable RefineShear;
  PUPable Refresh;
  PUPable RestrictLinear;
  PUPable ScheduleList;
  PUPable ScheduleInterval;

  array[Index] Block {

    entry Block
      (Index index,
       int nx, int ny, int nz,	
       int num_field_blocks,
       int count_adapt,
       int cycle, double time, double dt,
       int  n,     char arr[n],  int op_array,
       int num_face_level, int face_level[num_face_level],
       bool testing);

    entry Block();

    //--------------------------------------------------
    // *** INITIAL ***
    //--------------------------------------------------

    entry void p_initial_exit();
    entry void r_initial_exit(CkReductionMsg *);

    //--------------------------------------------------
    // *** OUTPUT ***
    //--------------------------------------------------

    entry void p_output_enter();
    entry void r_output_enter(CkReductionMsg *);

    entry void p_output_end();
    entry void p_output_exit();
    entry void r_output_exit(CkReductionMsg *);

    entry void p_output_write (int index_output);
    entry void p_output_read (int index_input);

    //--------------------------------------------------
    // *** COMPUTE ***
    //--------------------------------------------------

    entry void p_compute_enter();
    entry void r_compute_enter(CkReductionMsg *);

    entry void p_compute_continue();
    entry void r_compute_continue(CkReductionMsg *);

    entry void p_compute_exit();
    entry void r_compute_exit(CkReductionMsg *);

    //--------------------------------------------------
    // *** STOPPING ***
    //--------------------------------------------------

    entry void r_stopping_compute_timestep (CkReductionMsg * msg);

    entry void p_stopping_enter();
    entry void r_stopping_enter(CkReductionMsg *);

    entry void p_stopping_exit();
    entry void r_stopping_exit(CkReductionMsg *);

    entry void p_exit();
    entry void r_exit(CkReductionMsg *);

    //--------------------------------------------------
    // *** CONTROL ***
    //--------------------------------------------------

    entry [expedited] void p_control_sync_count ( int phase, int count = 0);

    //--------------------------------------------------
    // *** ADAPT ***
    //--------------------------------------------------

    entry void p_adapt_enter();
    entry void r_adapt_enter(CkReductionMsg *);

    entry void p_adapt_end();
    entry void r_adapt_end(CkReductionMsg *);

    entry void p_adapt_next();
    entry void r_adapt_next(CkReductionMsg *);

    entry void p_adapt_called();
    entry void r_adapt_called(CkReductionMsg *);

    entry void p_adapt_exit();
    entry void r_adapt_exit(CkReductionMsg *);

    entry void p_adapt_delete();

    entry void p_adapt_recv_level
      (Index index,int ic3[3], int if3[3], int level_now, int level_new);

    entry void p_adapt_recv_child
      (int ic3[3], int na, char arr[na], int nf, int child_face_level[nf]);


    //--------------------------------------------------
    // *** REFRESH
    //--------------------------------------------------

    entry void p_refresh_enter();
    entry void r_refresh_enter(CkReductionMsg *);

    entry void p_refresh_exit();
    entry void r_refresh_exit(CkReductionMsg *);

    entry [expedited] void x_refresh_send_face
      (int n, char buffer[n],  char rtype, int iface[3], int ichild[3]);

    entry void x_refresh_child
      (int n, char buffer[n], int ichild[3]);

  };
}

