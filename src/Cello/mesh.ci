// See LICENSE_CELLO file for license and copyright information

/// @file     mesh.ci
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     2011-05-09
/// @brief    CHARM++ Mesh process group

module mesh {

  PUPable Config;
  PUPable Factory;
  PUPable Initial;
  PUPable InitialDefault;
  PUPable InitialFile;
  PUPable InputData;
  PUPable OutputData;
  PUPable OutputImage;
  PUPable OutputCheckpoint;
  PUPable Problem;
  PUPable ProlongLinear;
  PUPable RestrictLinear;
  PUPable Refine;
  PUPable RefineSlope;
  PUPable RefineMass;
  PUPable ItFieldList;
  PUPable ItFieldRange;

  array[Index] CommBlock {

    entry CommBlock // [CB0]
      (Index index,
       int nx, int ny, int nz,	
       int num_field_blocks,
       int count_adapt,
       int cycle, double time, double dt,
       int  n,     char arr[n],  int op_array,
       int num_face_level, int face_level[num_face_level],
       bool testing);

    entry CommBlock();	 // [CB0]

    //--------------------------------------------------
    // *** OUTPUT ***
    //--------------------------------------------------

    entry void p_output_enter();
    entry void q_output_enter();
    entry void r_output_enter(CkReductionMsg *);

    entry void p_output_exit();
    entry void q_output_exit();
    entry void r_output_exit(CkReductionMsg *);

    entry void p_output_write (int index_output); // [CB1]
    entry void p_output_read (int index_input); // [CB3]

    //--------------------------------------------------
    // *** COMPUTE ***
    //--------------------------------------------------

    entry void p_compute_enter();
    entry void q_compute_enter();
    entry void r_compute_enter(CkReductionMsg *);

    entry void p_compute_exit();
    entry void q_compute_exit();
    entry void r_compute_exit(CkReductionMsg *);

    //--------------------------------------------------
    // *** STOPPING ***
    //--------------------------------------------------

    entry void r_stopping_compute_timestep (CkReductionMsg * msg); // [CB4]

    entry void p_stopping_enter();
    entry void q_stopping_enter();
    entry void r_stopping_enter(CkReductionMsg *);

    entry void p_stopping_exit();
    entry void q_stopping_exit();
    entry void r_stopping_exit(CkReductionMsg *);

    entry void p_exit();
    entry void q_exit();
    entry void r_exit(CkReductionMsg *);

    //--------------------------------------------------
    // *** CONTROL ***
    //--------------------------------------------------

    entry [expedited] void p_control_sync_count ( int phase, int count);

    //--------------------------------------------------
    // *** ADAPT ***
    //--------------------------------------------------

    entry void p_adapt_enter();   // [CB5]
    entry void q_adapt_enter();
    entry void r_adapt_enter(CkReductionMsg *);   // [CB22]

    entry void p_adapt_end();    // [CB13]
    entry void q_adapt_end();    // [CB13]
    entry void r_adapt_end(CkReductionMsg *);

    entry void p_adapt_next();    // [CB12]
    entry void q_adapt_next();    // [CB12]
    entry void r_adapt_next(CkReductionMsg *);

    entry void p_adapt_called();
    entry void q_adapt_called();
    entry void r_adapt_called(CkReductionMsg *);

    entry void p_adapt_delete();  // [CB11]

    entry void p_adapt_recv_neighbor_level  // [CB7]
      (Index index,int ic3[3], int if3[3], int level_now, int level_new);

    entry void p_adapt_send_child_data // [CB10]
      (int ic3[3], int na, char arr[na], int nf, int child_face_level[nf]);


    //--------------------------------------------------
    // *** REFRESH
    //--------------------------------------------------

    entry void p_refresh_enter();         // [CB14]
    entry void q_refresh_enter();
    entry void r_refresh_enter(CkReductionMsg *);

    entry void p_refresh_exit();
    entry void q_refresh_exit();          // [CB15]
    entry void r_refresh_exit(CkReductionMsg *);

    entry [expedited] void x_refresh_face // [CB21]
      (int n, char buffer[n],  char rtype, int iface[3], int ichild[3]);

    entry void x_refresh_child            // [CB19]
      (int n, char buffer[n], int ichild[3]);
 
  };
}

