// See LICENSE_CELLO file for license and copyright information

#ifndef PARALLEL_DEF
#define PARALLEL_DEF

/// @file     parallel.def
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     Mon Aug 13 2010
/// @brief    Macro definitions for the Parallel component


#define MPI_COMM_CELLO MPI_COMM_WORLD

#if defined(CONFIG_USE_CHARM)

//--------------------------------------------------
// USING CHARM
//--------------------------------------------------

#  define PARALLEL_INIT      /* BLANK */
#  define PARALLEL_EXIT      CkExit()
#  define PARALLEL_RUN       "charmrun [ +p<processors> ] "
#  define PARALLEL_PRINTF    CkPrintf
#  define PARALLEL_ARGC      main->argc
#  define PARALLEL_ARGV      main->argv

#  define PARALLEL_MAIN_BEGIN  \
      CProxy_Main proxy_main; \
         class Main : public CBase_Main { \
            public:\
               Main(CkArgMsg* main)
#  define PARALLEL_MAIN_END };

#  define PARALLEL_CLASS_DECL(CLASS) class CLASS : public CBase_##CLASS
#  define PARALLEL_PROXY(CLASS) CProxy_##CLASS
#  define PARALLEL_NEW_ARRAY_1D(CLASS,NX)       CProxy_##CLASS::ckNew(NX)
#  define PARALLEL_NEW_ARRAY_2D(CLASS,NX,NY)    CProxy_##CLASS::ckNew(NX,NY)
#  define PARALLEL_NEW_ARRAY_3D(CLASS,NX,NY,NZ) CProxy_##CLASS::ckNew(NX,NY,NZ)

#elif defined(CONFIG_USE_MPI)

//--------------------------------------------------
// USING MPI
//--------------------------------------------------

#include <mpi.h>

#  define PARALLEL_INIT      MPI_Init(&PARALLEL_ARGC,&PARALLEL_ARGV)
#  define PARALLEL_EXIT      MPI_Finalize(); exit(0);
#  define PARALLEL_RUN       "mpirun [ -n<processors> ] "

#else /* serial */

//--------------------------------------------------
// NOT USING CHARM NOR MPI
//--------------------------------------------------

#  define PARALLEL_INIT      /* BLANK */
#  define PARALLEL_EXIT      exit(0)
#  define PARALLEL_RUN       ""

#endif

#ifndef CONFIG_USE_CHARM

//--------------------------------------------------
// NOT USING CHARM
//--------------------------------------------------

#  define CkMigrateMessage   void
#  define PARALLEL_PRINTF    printf
#  define PARALLEL_ARGC      argc
#  define PARALLEL_ARGV      argv

#  define PARALLEL_MAIN_BEGIN int main(int argc, char ** argv)
#  define PARALLEL_MAIN_END   /* BLANK */

#  define PARALLEL_CLASS_DECL(CLASS) class CLASS 
#  define PARALLEL_PROXY(CLASS) CLASS 

#  define PARALLEL_NEW_ARRAY_1D(CLASS,NX)       new class CLASS [NX];
#  define PARALLEL_NEW_ARRAY_2D(CLASS,NX,NY)    new class CLASS [NX*NY];
#  define PARALLEL_NEW_ARRAY_3D(CLASS,NX,NY,NZ) new class CLASS [NX*NY*NZ];

#endif

#endif /* PARALLEL_HPP */
