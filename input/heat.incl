 Boundary {
     temperature {
         type = "inflow";
         value = 0.0000000000000;
     };
     type = "reflecting";
 }

 Domain {
     lower = [ 0.0000000000000, 0.0000000000000 ];
     upper = [ 1.0000000000000, 1.0000000000000 ];
 }

 Field {
     alignment = 8;
     courant = 0.50000000000000;
     gamma = 1.4000000000000;
     ghosts = 4;
     list = [ "temperature" ];
     padding = 0;
 }

 Initial {
     temperature {
         value = [ 100.00000000000, ((( x  -  0.50000000000000 ) * ( x  -  0.50000000000000 )) + (( y  -  0.50000000000000 ) * ( y  -  0.50000000000000 ))) <  0.050000000000000 , 10.000000000000 ];
     };
 }

 Mesh {
     root_blocks = [ 2, 2 ];
     root_rank = 2;
     root_size = [ 80, 80 ];
 }

Adapt {
   max_level = 3; 
   list = ["slope"];
   slope {
      type = "slope";
      field_list = ["temperature"];
      min_refine = 10.0;
      max_coarsen = 2.0;
   }
}


 Method {
     list = [ "heat" ];
     heat {
         alpha = 1.0000000000000;
         refresh = "refresh";
     };
 }

 Refresh {
    list = ["refresh"];

    refresh {
       min_face_rank = 0;
       field_list = [];
       field_ghosts = 4;
    }
 }

 Output {
     list = [ "temp", "mesh" ];
     temp {
         colormap = [ 0.0000000000000, 0.0000000000000, 0.0000000000000, 1.0000000000000, 0.0000000000000, 0.0000000000000, 1.0000000000000, 1.0000000000000, 0.0000000000000, 1.0000000000000, 1.0000000000000, 1.0000000000000 ];
         field_list = [ "temperature" ];
         name = [ "method_heat-8-%06d.png", "cycle" ];
         schedule {
             step = 10;
             var = "cycle";
         };
         type = "image";
     };
    mesh {
	type     = "image";
	image_type  = "mesh";
	image_reduce_type = "max";
#	image_block_size  = 5;
	image_size = [641,641];
        include "input/schedule_cycle_10.incl"
        image_specify_bounds = true;
	image_min = 0.0;
	image_max = 4.0;
        include "input/colormap_rainbow.incl"
      }
 }

 Stopping {
     cycle = 1000;
 }

 Testing {
     cycle_final = 1000;
     time_final = 0.0006103515625;
 }
