# Problem: 2D Implosion problem
# Author:  James Bordner (jobordner@ucsd.edu)

include "input/method_ppm-1.in"

Mesh {
   root_blocks = [2,2];
   adapt {
      type = ["slope"];
      fields = ["density"];
      balance = true;
   }
}

Stopping { 
	 cycle = 10000; 
	 time = 0.1;
}

Boundary { type = "periodic"; }

Testing {
   time_final  = 0.10;
}

Initial {
    density       { value = 
    [
       1.000, 1.0*x + 2.0*y  < 1.0,
       1.000, 1.0*x + 2.0*y  > 2.0,
       1.000, 2.0*x - 1.0*y  < 0.0,
       1.000, 2.0*x - 1.0*y  > 1.0,
                   0.125 ]; };
    total_energy  { value = 
    [ 
       1.0  / (0.4 * 1.0), 1.0*x + 2.0*y  < 1.0,
       1.0  / (0.4 * 1.0), 1.0*x + 2.0*y  > 2.0,
       1.0  / (0.4 * 1.0), 2.0*x - 1.0*y  < 0.0,
       1.0  / (0.4 * 1.0), 2.0*x - 1.0*y  > 1.0,
                     0.14 / (0.4 * 0.1)  ]; };
    velocity_x    { value = [0.0]; };
    velocity_y    { value = [0.0]; }
}


Initial {
    density       { value = 
    [
       1.000, 1.0*x + 2.0*y  < 1.0,
       1.000, 1.0*x + 2.0*y  > 2.0,
       1.000, 2.0*x - 1.0*y  < 0.0,
       1.000, 2.0*x - 1.0*y  > 1.0,
                   0.125 ]; };
    total_energy  { value = 
    [ 
       1.0  / (0.4 * 1.0), 1.0*x + 2.0*y  < 1.0,
       1.0  / (0.4 * 1.0), 1.0*x + 2.0*y  > 2.0,
       1.0  / (0.4 * 1.0), 2.0*x - 1.0*y  < 0.0,
       1.0  / (0.4 * 1.0), 2.0*x - 1.0*y  > 1.0,
                     0.14 / (0.4 * 0.1)  ]; };
    velocity_x    { value = [0.0]; };
    velocity_y    { value = [0.0]; }
}


Field {
    ghosts = 4; # must be even for ProlongLinear
    prolong = "linear";
    refresh {
       rank = 0;
    }
}


Output {

    file_groups = ["de", "dm", "mesh", "te", "vx", "vy"];

    data {
        name = ["adapt-%02d-%06d.h5", "proc","cycle"]; 
        field_list = ["density"];
	type     = "data";
	schedule = ["cycle","interval", 100];
      };

    de {
       field_list = ["density"];
       type     = "image";
       schedule = ["cycle","interval", 10];
#       image_size = [1025,1025];
       include "input/colormap_blackbody.incl"
        image_specify_bounds = true;
	image_min = 0.0;
	image_max = 3.0;

    };
    dm {
       field_list = ["density"];
       type     = "image";
       schedule = ["cycle","interval", 10];
#       image_size = [1025,1025];
       include "input/colormap_blackbody.incl"
       image_specify_bounds = true;
	image_min = 0.1;
	image_max = 3.1;
    };

    te {

       field_list = ["total_energy"];
       type     = "image";
       schedule = ["cycle","interval", 10];
       colormap = [1.0,1.0,1.0, 1.0,0.0,0.0,  0.75,0.25,0.0,  1.0,1.0,0.0,   0.0,1.0,0.0,  0.0,0.0,1.0,  0.5,1.0,0.5];
    };

    vx {

       field_list = ["velocity_x"];
       type     = "image";
       schedule = ["cycle","interval", 10];
       colormap = [1.0,1.0,1.0, 1.0,0.0,0.0,  0.75,0.25,0.0,  1.0,1.0,0.0,   0.0,1.0,0.0,  0.0,0.0,1.0,  0.5,1.0,0.5];
    };

    vy {

       field_list = ["velocity_y"];
       type     = "image";
       schedule = ["cycle","interval", 10];
       colormap = [1.0,1.0,1.0, 1.0,0.0,0.0,  0.75,0.25,0.0,  1.0,1.0,0.0,   0.0,1.0,0.0,  0.0,0.0,1.0,  0.5,1.0,0.5];
    };

    mesh {
	type     = "image";
	image_type  = "data+mesh";
	image_reduce_type = "max";
        field_list = ["density"];
	image_block_size  = 5;
#	image_size = [1025,1025];
	schedule = ["cycle","interval", 10];
        image_specify_bounds = true;
	image_min = 0.0;
	image_max = 6.0;
       include "input/colormap_blackbody.incl"
      }
}

