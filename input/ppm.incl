# Problem: 2D Implosion problem
# Author:  James Bordner (jobordner@ucsd.edu)

   # Domain is the two dimensional box 0 < x,y < 1.0

   Domain { 
      lower = [0.0, 0.0];
      upper = [1.0, 1.0];
   } 

   # The computational mesh is a single uniform grid

   Mesh { 
      root_rank = 2;
      root_size = [80,80];
   }

   # Field parameters include those concerning fields as a group, as
   # well as individual fields
   
   Field {

      ghosts = 3;

      refresh { rank = 1;  }; # refresh edges not corners

      fields = [
	"density",	
	"velocity_x",
	"velocity_y",
	"total_energy",
	"internal_energy"
      ] ;

      # courant condition for fields

      courant   = 0.8;

      padding   = 0;
      alignment = 8;    
   }

   Method {

      # list of methods to apply and in what order
 
      sequence = ["ppm"];

   }

   Timestep { type = "ppm"; }

   Enzo {

      gamma = 1.4;

      ppm {

         # method-specific parameters

         diffusion   = true;
         flattening  = 3;
         steepening  = true;

         dual_energy = false;
     }
   }

   Initial {
       density       { value = [ 0.125,                x + y < 0.5,
                                 1.0 ]; };
       total_energy  { value = [ 0.14 / (0.4 * 0.125), x + y < 0.5,
	                         1.0  / (0.4 * 1.0) ]; };
       velocity_x    { value = [0.0]; };
       velocity_y    { value = [0.0]; };
       internal_energy { value = [0.0]; }
   }

   Boundary { type = "reflecting" }

   Stopping {        cycle = 400;   } 
   Testing {   cycle_final = 400; }

# OLD TIME
#   Testing {  time_final  = 1.03693807162344;  } 
# TIME FOR UPDATED InitialDefault
   Testing {  time_final  = 1.04044035635889; }

   Output { 

      file_groups = ["density","data"];

      density {
        field_list = ["density"];
	type     = "image";
	schedule = ["cycle","interval", 10];
        colormap = [0.00, 0.00, 0.50,  
                    0.00, 1.00, 0.00, 
                    1.00, 1.00, 0.00, 
                    1.00, 0.00, 0.00];
        
      };

      data {
        field_list = ["density"];
	type     = "data";
	schedule = ["cycle","interval", 100];
      };

   }

#    Performance {
#       projections {
#        on  { schedule = ["cycle", "list",      20]; };
#        off { schedule = ["cycle", "list",  10 ]; }
#       }
#    }
