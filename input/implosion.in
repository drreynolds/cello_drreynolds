# Problem: 2D Implosion problem
# Author:  James Bordner (jobordner@ucsd.edu)
#
# This file is used for developing the Cello / Enzo-P input grammar and syntax

   # Cello version information can be compared with actual source
   # version information at run time to help detect possible
   # inconsistencies between source code and input file parameters.

   Cello {

      code_version_major = 0;
      code_version_minor = 3;
      code_version_patch = 2;

      # implementations built on Cello may have independent versioning

      enzo_ppm { code_version_major = 1 }
   }

   # Domain is the two dimensional box 0 < x,y < 0.3

   Domain { 
      extent = [0.0, 0.3, 0.0, 0.3] 
   } 

   # The computational mesh is a 400 x 400 uniform grid, broken up
   # into computational blocks (parallel task size) of size 8 x 8.

   Mesh { 
      root_size      = [400,400];
      min_block_size = 8;
      max_block_size = 8;
      max_level      = 0; 

      # remaining mesh parameters are ignored if max_level == 0

      backfill       = false;
      refine         = 2;
      balanced       = true;
      backfill       = true;
      coalesce       = true;
   }

   # Field parameters include those concerning fields as a group, as
   # well as individual fields
   
   Field {

      fields = [
	"density",	
	"total_energy",
	"internal_energy",
	"velocity_x",
	"velocity_y"
      ] ;

      # courant condition for fields

      courant   = 0.8;

      # Amount of padding between fields in bytes; may be helpful to
      # avoid cache thrashing for large 2^k length field blocks.  Two
      # cache lines is recommended
 
      padding   = 0;
                        
      # align start of each field block on an 8-byte segment;
      # important for performance on e.g. IBM Power architectures

      alignment = 8;    

      # Specifying names also specifies ordering of field storage,
      # which may affect performance.  Note fields may be different
      # sizes if not cell-centered
    
      names = ["density", "velocity_x", "velocity_y", "total_energy"];

      # List of user-defined groups, which may be accessed by applications
      # built on Cello to process different groups of fields in different
      # ways.  E.g. "color" fields for Enzo PPM, or "computed" fields that
      # are not permanently stored (like pressure)

      groups = ["computed", "color"];

      pressure { 

         # issue an error if the pressure falls below 1.0e-6 anywhere
         # issue an error if the density goes negative

         min_value  = [1.0e-6,    0.0    ];
         min_action = ["warning", "error"];

         # pressure is computed not evolved

         groups = ["computed"];
      };

      density  { 

         # If a method calls the density field "rho" instead of
         # "density" Probably not a good idea to use, but may simplify
         # coupling methods developed by independent groups that
         # weren't originally meant to work with each other.

         alias = ["rho"];

         # issue a warning if the density falls below 1.0e-6 anywhere
         # issue an error if the density goes negative 

         # [could consolidate into a single list [ 1.0e-6, "warning",
         # 0.0, "error" ] since value and action are closely related

         min_value =  [ 1.0e-6,       0.0 ];
         min_action = [ "warning", "error"];

         # for fun, use double precision for density even if default is single
         # (implemented: single double extended80 extended96 quadruple)
         # ( half may be useful for visualization )

         precision = "double"
      };

      # Velocity is face-centered not cell-centered
      # default is centered [true, true, true]

      velocity_x { centering = [false, true];  };
      velocity_y { centering = [true, false];  }
   }

   Method {

      # list of methods to apply and in what order
 
      sequence = ["ppm"];

      ppm {

         # method-specific parameters.  Note this is Enzo-P not Cello 

         diffusion   = false;
         flattening  = false;
         steepening  = true;
         dual_energy = false;
     }
   }

   Physics {

      # cosmology parameters go here

      gamma = 1.4; # in general should be in a "Material" or "Gas" group or similar

   }

   Initial {

      # equivalent to density(x,y) = (x + y < 0.15) ? 0.125 : 1.0

      density  = [ 0.125, x + y < 0.15, 1.0 ];  

      pressure = [ 0.14,  x + y < 0.15, 1.0 ];

      velocity_x = [0.0];
      velocity_y = [0.0];
   }

   Boundary { type = "reflecting" }

   Stopping {
      time  = 2.5;
      cycle = 20000;
      # redshift
   }

   Output { 
      # this section needs more work

      # subgroup specifies the subdirectory / file name
      data {
        # output types ["data", "restart", "projection", user-defined]
        type = "data";
        delta_time = 0.5 ;  # dt? time? 
 
      };

      restart {
        # default restart parameters(?)
        type = "restart";
      }

   }
 