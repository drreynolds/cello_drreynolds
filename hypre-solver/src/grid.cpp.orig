//======================================================================
//
//        File: grid.cpp
//
//     Summary: Grid class source file
//
// Description:
//
//      Author: James Bordner <jobordner@ucsd.edu>
//
//        Date: 2007-03-26
//
//======================================================================

#include <assert.h>
#include <stdio.h>
#include <string>
#include <vector>

#include "HYPRE_sstruct_ls.h"

#include "scalar.hpp"
#include "grid.hpp"

//----------------------------------------------------------------------

const int debug = 1;

//----------------------------------------------------------------------

int Grid::d_ = 0;
std::vector<Grid *> Grid::list_;

//----------------------------------------------------------------------

Grid::Grid (std::string parms) throw ()
  : is_mesh_initialized_(false)

{
  // Define a grid given text parameters, typically from a file

  alloc_();   // NOTE: inefficient for dimension < 3

  read (parms);

  if (id_ >= list_.size()) {
    if (debug) printf ("DEBUG: resizing Grid::list_ from %d to %d\n",
		       list_.size(),id_+1);
    list_.resize (id_ + 1);
  }
  list_[id_] = this;
  check ();

}
	  
//----------------------------------------------------------------------

Grid::~Grid () throw ()
{
  dealloc_();
}

//======================================================================

void Grid::print () throw ()
{
  printf ("Grid\n"
	  "   id             %d\n"
	  "   parent id      %d\n"
	  "   processor      %d\n"
	  "   lower position "SCALAR_PRINTF SCALAR_PRINTF SCALAR_PRINTF"\n"
	  "   upper position "SCALAR_PRINTF SCALAR_PRINTF SCALAR_PRINTF"\n"
	  "   zones          %d %d %d\n"
	  "  [dimension]     %d\n"
	  "  [level]         %d\n",
	  id_,id_parent_,ip_,
	  xl_[0],xl_[1],xl_[2],
	  xu_[0],xu_[1],xu_[2],
	  n_ [0],n_ [1],n_ [2],
	  d_,level_);
}

//----------------------------------------------------------------------

void Grid::write (FILE *fp) throw ()
{
  if (fp == 0) fp = stdout;

  fprintf (fp,"grid "
	   "%d %d %d "
	   SCALAR_PRINTF SCALAR_PRINTF SCALAR_PRINTF
	   SCALAR_PRINTF SCALAR_PRINTF SCALAR_PRINTF
	   "%d %d %d\n",
	   id_,id_parent_,ip_,
	   xl_[0],xl_[1],xl_[2],
	   xu_[0],xu_[1],xu_[2],
	   n_ [0],n_ [1],n_ [2]);
}

//----------------------------------------------------------------------

void Grid::read (std::string parms) throw ()
{

  sscanf (parms.c_str(),
	  "%d%d%d" 
	  SCALAR_SCANF SCALAR_SCANF SCALAR_SCANF
	  SCALAR_SCANF SCALAR_SCANF SCALAR_SCANF
	  "%d%d%d",
	  &id_, &id_parent_, &ip_,
	  &xl_[0],&xl_[1],&xl_[2],
	  &xu_[0],&xu_[1],&xu_[2],
	  &n_[0],&n_[1],&n_[2]);

  level_ = -1;

}

//======================================================================
// PUBLIC STATIC MEMBER FUNCTIONS
//======================================================================

void Grid::init_mesh ()
{
  //  bool                is_mesh_initialized_;
  //  int                 level_;      // Hierarchy level (root==0)
  //  Grid *              parent_;
  //  std::vector<Grid *> neighbors_;  // Array of neighboring grids in this level
  //  std::vector<Grid *> children_;   // Array of child grids
  //  HYPRE_SStructGrid   hypre_grid_; // Struct for hypre grid

  printf ("%s:%d Grid::init_mesh()\n",__FILE__,__LINE__);

  for (int i=0; i<Grid::num_grids (); i++) {
    printf ("%d\n",i);
    Grid::grid(i).print();
  }

  printf ("%s:%d Grid::init_mesh()\n",__FILE__,__LINE__);
}

//======================================================================
// PRIVATE MEMBER FUNCTIONS
//======================================================================

void Grid::alloc_ () throw ()
{
  xl_ = new Scalar [ d_ ];
  xu_ = new Scalar [ d_ ];
  n_  = new int    [ d_ ];
}

//----------------------------------------------------------------------

void Grid::dealloc_ () throw ()
{
  delete [] xl_;  xl_ = 0;
  delete [] xu_;  xu_ = 0;
  delete [] n_;   n_ = 0;
}
